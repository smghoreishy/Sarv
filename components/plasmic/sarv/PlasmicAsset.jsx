// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: kQ-2RwgkanBM
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: hdkwfO6DN97t/component
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar"; // plasmic-import: nqcsn8n56U/codeComponent
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import { Collapse } from "@plasmicpkgs/antd/skinny/registerCollapse"; // plasmic-import: F10gpQ1ZhXY/codeComponent
import { CollapsePanel } from "@plasmicpkgs/antd/skinny/registerCollapse"; // plasmic-import: yegZ392NLoV/codeComponent
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2"; // plasmic-import: 0Qywk3bhW-8/codeComponent
import Footer from "../../Footer"; // plasmic-import: wozDst_MhUug/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicAsset.module.css"; // plasmic-import: kQ-2RwgkanBM/css

createPlasmicElementProxy;

export const PlasmicAsset__VariantProps = new Array(
  "myTransactions",
  "myAssets",
  "unnamedVariant"
);

export const PlasmicAsset__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsset__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sarvButton2.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "transactionHistory.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softBlueSelected"
      },
      {
        path: "withdrawal.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "myTransactions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.myTransactions
      },
      {
        path: "deposit3.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "myTransactions", "myTransactions")
            ? "softBlueSelected"
            : undefined
      },
      {
        path: "myAssets",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.myAssets
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "sarvButton3[].selected",
        type: "private",
        variableType: "text"
      },
      {
        path: "sarvButton4[].selected",
        type: "private",
        variableType: "text"
      },
      {
        path: "antdCollapse[].activeKey",
        type: "private",
        variableType: "array"
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "c73ec5af-e060-49e8-8761-08709dc88f70",
            userArgs: {},
            cacheKey: "plasmic.$.xKUimvNZO3cR.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "745f5b06-5a9d-4296-a528-555402143d0a",
            userArgs: {},
            cacheKey: "plasmic.$.ULOYd-LCCcnl.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "613ec56d-90ac-4ebf-b2be-3f415f35c23d",
            userArgs: {},
            cacheKey: "plasmic.$.L3e8E8M9F8RB.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_landing_page_starter_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootmyAssets]: hasVariant($state, "myAssets", "myAssets"),
              [sty.rootmyTransactions]: hasVariant(
                $state,
                "myTransactions",
                "myTransactions"
              ),

              [sty.rootunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <section
            className={classNames(projectcss.all, sty.section__g5IhB, {
              [sty.sectionmyAssets__g5IhBt1Bxz]: hasVariant(
                $state,
                "myAssets",
                "myAssets"
              ),

              [sty.sectionmyTransactions__g5IhBghR]: hasVariant(
                $state,
                "myTransactions",
                "myTransactions"
              )
            })}
          >
            <section
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <Header
                className={classNames("__wab_instance", sty.header__iLv2E)}
              />
            </section>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jYsho, {
                [sty.freeBoxmyAssets__jYshot1Bxz]: hasVariant(
                  $state,
                  "myAssets",
                  "myAssets"
                ),

                [sty.freeBoxmyTransactions__jYshoghR]: hasVariant(
                  $state,
                  "myTransactions",
                  "myTransactions"
                )
              })}
            >
              <section
                data-plasmic-name={"profile"}
                data-plasmic-override={overrides.profile}
                className={classNames(projectcss.all, sty.profile, {
                  [sty.profilemyAssets]: hasVariant(
                    $state,
                    "myAssets",
                    "myAssets"
                  ),

                  [sty.profilemyTransactions]: hasVariant(
                    $state,
                    "myTransactions",
                    "myTransactions"
                  )
                })}
              >
                <AntdAvatar
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  className={classNames("__wab_instance", sty.avatar)}
                  letters={"AB"}
                  size={"large"}
                  src={"/plasmic/sarv/images/photo14020615214947Jpeg.jpg"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oIcM7
                  )}
                >
                  {"\u0645\u062d\u0645\u062f \u0642\u0631\u06cc\u0634\u06cc"}
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pI5AA)}
                >
                  <SarvButton
                    data-plasmic-name={"sarvButton"}
                    data-plasmic-override={overrides.sarvButton}
                    className={classNames("__wab_instance", sty.sarvButton)}
                    color={"softPersianGreen"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToWallet"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "PgzLFJDON_mb",
                                  componentUuid: "kQ-2RwgkanBM",
                                  argName: "destination"
                                },
                                () => `/wallet`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "PgzLFJDON_mb",
                                componentUuid: "kQ-2RwgkanBM"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToWallet"] === "object" &&
                        typeof $steps["goToWallet"].then === "function"
                      ) {
                        $steps["goToWallet"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "PgzLFJDON_mb",
                            componentUuid: "kQ-2RwgkanBM"
                          },
                          $steps["goToWallet"]
                        );
                      }
                    }}
                    onSelectedChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "sarvButton",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    selected={p.generateStateValueProp($state, [
                      "sarvButton",
                      "selected"
                    ])}
                  >
                    {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
                  </SarvButton>
                  <SarvButton
                    data-plasmic-name={"sarvButton2"}
                    data-plasmic-override={overrides.sarvButton2}
                    className={classNames("__wab_instance", sty.sarvButton2)}
                    color={"persianGreen"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToAsset"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: __wrapUserFunction(
                                {
                                  type: "InteractionArgLoc",
                                  actionName: "navigation",
                                  interactionUuid: "SODcqnfd2giR",
                                  componentUuid: "kQ-2RwgkanBM",
                                  argName: "destination"
                                },
                                () => `/Assets`
                              )
                            };
                            return __wrapUserFunction(
                              {
                                type: "InteractionLoc",
                                actionName: "navigation",
                                interactionUuid: "SODcqnfd2giR",
                                componentUuid: "kQ-2RwgkanBM"
                              },
                              () =>
                                (({ destination }) => {
                                  __nextRouter?.push(destination);
                                })?.apply(null, [actionArgs]),
                              actionArgs
                            );
                          })()
                        : undefined;
                      if (
                        typeof $steps["goToAsset"] === "object" &&
                        typeof $steps["goToAsset"].then === "function"
                      ) {
                        $steps["goToAsset"] = await __wrapUserPromise(
                          {
                            type: "InteractionLoc",
                            actionName: "navigation",
                            interactionUuid: "SODcqnfd2giR",
                            componentUuid: "kQ-2RwgkanBM"
                          },
                          $steps["goToAsset"]
                        );
                      }
                    }}
                    onSelectedChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "sarvButton2",
                        "selected"
                      ])(eventArgs[0]);
                    }}
                    selected={p.generateStateValueProp($state, [
                      "sarvButton2",
                      "selected"
                    ])}
                  >
                    {
                      "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0627\u0631\u0627\u06cc\u06cc"
                    }
                  </SarvButton>
                </p.Stack>
                <div className={classNames(projectcss.all, sty.freeBox__gKcE)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__f8Ep)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"153px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/sarv/images/trees1Png.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___9U9Ia)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"153px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/sarv/images/trees1Png.png",
                      fullWidth: 512,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </section>
              <div
                className={classNames(projectcss.all, sty.freeBox__nKab, {
                  [sty.freeBoxmyTransactions__nKabGhR]: hasVariant(
                    $state,
                    "myTransactions",
                    "myTransactions"
                  )
                })}
              >
                <section
                  data-plasmic-name={"walletSide"}
                  data-plasmic-override={overrides.walletSide}
                  className={classNames(projectcss.all, sty.walletSide, {
                    [sty.walletSidemyAssets]: hasVariant(
                      $state,
                      "myAssets",
                      "myAssets"
                    ),

                    [sty.walletSidemyTransactions]: hasVariant(
                      $state,
                      "myTransactions",
                      "myTransactions"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v0Hnh
                    )}
                  >
                    {
                      "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627"
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__diXFd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jvfNa
                      )}
                    >
                      {"\u06f7\u06f7\u06f3"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m4Szr,
                        {
                          [sty.textmyTransactions__m4SzrghR]: hasVariant(
                            $state,
                            "myTransactions",
                            "myTransactions"
                          )
                        }
                      )}
                    >
                      {"\u062a\u0648\u0645\u0627\u0646"}
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__svAci, {
                      [sty.freeBoxmyTransactions__svAcighR]: hasVariant(
                        $state,
                        "myTransactions",
                        "myTransactions"
                      )
                    })}
                  >
                    <SarvButton
                      data-plasmic-name={"transactionHistory"}
                      data-plasmic-override={overrides.transactionHistory}
                      className={classNames(
                        "__wab_instance",
                        sty.transactionHistory,
                        {
                          [sty.transactionHistorymyAssets]: hasVariant(
                            $state,
                            "myAssets",
                            "myAssets"
                          ),

                          [sty.transactionHistorymyTransactions]: hasVariant(
                            $state,
                            "myTransactions",
                            "myTransactions"
                          )
                        }
                      )}
                      color={
                        hasVariant($state, "myAssets", "myAssets")
                          ? "softPersianGreen"
                          : hasVariant(
                              $state,
                              "myTransactions",
                              "myTransactions"
                            )
                          ? "softPersianGreen"
                          : "persianGreen"
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateDeposit"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "XqsacRWBonKd",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myTransactions"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "XqsacRWBonKd",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 6
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "XqsacRWBonKd",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, false);
                                    return false;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateDeposit"] === "object" &&
                          typeof $steps["updateDeposit"].then === "function"
                        ) {
                          $steps["updateDeposit"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "XqsacRWBonKd",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateDeposit"]
                          );
                        }
                        $steps["updateDeposit"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "EyQHrgQzCWWV",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myAssets"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "EyQHrgQzCWWV",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 6
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "EyQHrgQzCWWV",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, false);
                                    return false;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateDeposit"] === "object" &&
                          typeof $steps["updateDeposit"].then === "function"
                        ) {
                          $steps["updateDeposit"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "EyQHrgQzCWWV",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateDeposit"]
                          );
                        }
                      }}
                      onSelectedChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "transactionHistory",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      selected={p.generateStateValueProp($state, [
                        "transactionHistory",
                        "selected"
                      ])}
                      submitsForm={false}
                    >
                      {
                        "\u062e\u0644\u0627\u0635\u0647 \u0648\u0636\u0639\u06cc\u062a"
                      }
                    </SarvButton>
                    <SarvButton
                      data-plasmic-name={"deposit3"}
                      data-plasmic-override={overrides.deposit3}
                      className={classNames("__wab_instance", sty.deposit3, {
                        [sty.deposit3myAssets]: hasVariant(
                          $state,
                          "myAssets",
                          "myAssets"
                        ),

                        [sty.deposit3myTransactions]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      })}
                      color={
                        hasVariant($state, "myAssets", "myAssets")
                          ? "persianGreen"
                          : hasVariant(
                              $state,
                              "myTransactions",
                              "myTransactions"
                            )
                          ? "softPersianGreen"
                          : "softPersianGreen"
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateDeposit"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "mwLx0eZI4cGn",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myAssets"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "mwLx0eZI4cGn",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 4
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "mwLx0eZI4cGn",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, true);
                                    return true;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateDeposit"] === "object" &&
                          typeof $steps["updateDeposit"].then === "function"
                        ) {
                          $steps["updateDeposit"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "mwLx0eZI4cGn",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateDeposit"]
                          );
                        }
                        $steps["updateWithdraw"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "nS8fkI6d1Jxj",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myTransactions"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "nS8fkI6d1Jxj",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 6
                                ),

                                value: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "nS8fkI6d1Jxj",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "value"
                                  },
                                  () => "myTransactions"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "nS8fkI6d1Jxj",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, false);
                                    return false;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateWithdraw"] === "object" &&
                          typeof $steps["updateWithdraw"].then === "function"
                        ) {
                          $steps["updateWithdraw"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "nS8fkI6d1Jxj",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateWithdraw"]
                          );
                        }
                      }}
                      onSelectedChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "deposit3",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      selected={p.generateStateValueProp($state, [
                        "deposit3",
                        "selected"
                      ])}
                    >
                      {"\u062f\u0627\u0631\u0627\u06cc\u06cc \u0645\u0646"}
                    </SarvButton>
                    <SarvButton
                      data-plasmic-name={"withdrawal"}
                      data-plasmic-override={overrides.withdrawal}
                      className={classNames("__wab_instance", sty.withdrawal, {
                        [sty.withdrawalmyAssets]: hasVariant(
                          $state,
                          "myAssets",
                          "myAssets"
                        ),

                        [sty.withdrawalmyTransactions]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      })}
                      color={
                        hasVariant($state, "myTransactions", "myTransactions")
                          ? "persianGreen"
                          : "softPersianGreen"
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateWithdraw"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "aE6XypkeKH6F",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myTransactions"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "aE6XypkeKH6F",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 4
                                ),

                                value: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "aE6XypkeKH6F",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "value"
                                  },
                                  () => "myTransactions"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "aE6XypkeKH6F",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, true);
                                    return true;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateWithdraw"] === "object" &&
                          typeof $steps["updateWithdraw"].then === "function"
                        ) {
                          $steps["updateWithdraw"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "aE6XypkeKH6F",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateWithdraw"]
                          );
                        }
                        $steps["updateDeposit"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "7FtUzA_MlLuU",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "vgroup"
                                  },
                                  () => "myAssets"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "7FtUzA_MlLuU",
                                    componentUuid: "kQ-2RwgkanBM",
                                    argName: "operation"
                                  },
                                  () => 6
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "7FtUzA_MlLuU",
                                  componentUuid: "kQ-2RwgkanBM"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, false);
                                    return false;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateDeposit"] === "object" &&
                          typeof $steps["updateDeposit"].then === "function"
                        ) {
                          $steps["updateDeposit"] = await __wrapUserPromise(
                            {
                              type: "InteractionLoc",
                              actionName: "updateVariant",
                              interactionUuid: "7FtUzA_MlLuU",
                              componentUuid: "kQ-2RwgkanBM"
                            },
                            $steps["updateDeposit"]
                          );
                        }
                      }}
                      onSelectedChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "withdrawal",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      selected={p.generateStateValueProp($state, [
                        "withdrawal",
                        "selected"
                      ])}
                    >
                      {"\u0645\u0639\u0627\u0645\u0644\u0627\u062a"}
                    </SarvButton>
                  </p.Stack>
                  <div
                    data-plasmic-name={"state"}
                    data-plasmic-override={overrides.state}
                    className={classNames(
                      projectcss.all,
                      sty.state,
                      hasVariant($state, "myTransactions", "myTransactions")
                        ? "table"
                        : "table",
                      {
                        [sty.statemyAssets]: hasVariant(
                          $state,
                          "myAssets",
                          "myAssets"
                        ),

                        [sty.statemyTransactions]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      }
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___83Y4E,
                        {
                          [sty.freeBoxmyTransactions___83Y4EGhR]: hasVariant(
                            $state,
                            "myTransactions",
                            "myTransactions"
                          )
                        }
                      )}
                    >
                      <section
                        data-plasmic-name={
                          "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631"
                        }
                        data-plasmic-override={overrides.مزانسرماهذار}
                        className={classNames(projectcss.all, sty.مزانسرماهذار)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__x3NrO)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"64px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/moneypng.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1HgPx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rlM2C
                            )}
                          >
                            {
                              "\u0627\u0631\u0632\u0634 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Nnx
                            )}
                          >
                            {
                              "\u06f1\u06f9\u06f1\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                            }
                          </div>
                        </div>
                      </section>
                      <section
                        data-plasmic-name={
                          "\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644"
                        }
                        data-plasmic-override={overrides.موجودفول}
                        className={classNames(projectcss.all, sty.موجودفول)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___2EPJs)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"64px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/wallet1Png.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__t11R8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cXtaF
                            )}
                          >
                            {
                              "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aTswY
                            )}
                          >
                            {
                              "\u06f7\u06f7\u06f3 \u062a\u0648\u0645\u0627\u0646"
                            }
                          </div>
                        </div>
                      </section>
                      <section
                        data-plasmic-name={"\u0633\u0648\u062f\u0644"}
                        data-plasmic-override={overrides.سودل}
                        className={classNames(projectcss.all, sty.سودل)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__fwCzi)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"64px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/profitspng.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mzxB9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ct7Uy
                            )}
                          >
                            {"\u0633\u0648\u062f \u06a9\u0644"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i7FEb
                            )}
                          >
                            {"\u06f0 \u062a\u0648\u0645\u0627\u0646"}
                          </div>
                        </div>
                      </section>
                      <section
                        data-plasmic-name={
                          "\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627"
                        }
                        data-plasmic-override={overrides.تعدادروهها}
                        className={classNames(projectcss.all, sty.تعدادروهها)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kkIqp)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"64px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/buildingpng.png",
                            fullWidth: 256,
                            fullHeight: 256,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fwV19
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cz8N0
                            )}
                          >
                            {
                              "\u062a\u0639\u062f\u0627\u062f \u062f\u0627\u0631\u0627\u06cc\u06cc"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pv45D
                            )}
                          >
                            {"\u06f3 \u0639\u062f\u062f"}
                          </div>
                        </div>
                      </section>
                    </div>
                  </div>
                  {(
                    hasVariant($state, "myAssets", "myAssets")
                      ? true
                      : hasVariant($state, "myTransactions", "myTransactions")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"myAssts"}
                      data-plasmic-override={overrides.myAssts}
                      className={classNames(projectcss.all, sty.myAssts, {
                        [sty.myAsstsmyAssets]: hasVariant(
                          $state,
                          "myAssets",
                          "myAssets"
                        ),

                        [sty.myAsstsmyTransactions]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ulX6,
                          {
                            [sty.textmyAssets__ulX6T1Bxz]: hasVariant(
                              $state,
                              "myAssets",
                              "myAssets"
                            )
                          }
                        )}
                      >
                        {
                          "\u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u0645\u0646"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4GDvs,
                          {
                            [sty.freeBoxmyAssets___4GDvsT1Bxz]: hasVariant(
                              $state,
                              "myAssets",
                              "myAssets"
                            )
                          }
                        )}
                      >
                        {(
                          (() => {
                            try {
                              return [2, 3, 4];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })() ?? []
                        ).map((currentItem, currentIndex) => (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ml1X,
                              {
                                [sty.freeBoxmyAssets__ml1Xt1Bxz]: hasVariant(
                                  $state,
                                  "myAssets",
                                  "myAssets"
                                )
                              }
                            )}
                            key={currentIndex}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__npqPu, {
                                [sty.imgmyAssets__npqPut1Bxz]: hasVariant(
                                  $state,
                                  "myAssets",
                                  "myAssets"
                                )
                              })}
                              displayHeight={"20vh"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"100%"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/sarv/images/pexelsLucaBarth18038787Jpg.png",
                                fullWidth: 937,
                                fullHeight: 1275,
                                aspectRatio: undefined
                              }}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__shto9,
                                {
                                  [sty.freeBoxmyAssets__shto9T1Bxz]: hasVariant(
                                    $state,
                                    "myAssets",
                                    "myAssets"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wBiZz,
                                  {
                                    [sty.textmyAssets__wBiZzt1Bxz]: hasVariant(
                                      $state,
                                      "myAssets",
                                      "myAssets"
                                    )
                                  }
                                )}
                              >
                                {
                                  "\u0634\u0647\u0631\u06a9 \u0645\u0627\u0631\u0628\u0644\u0627 | \u0648\u06cc\u0644\u0627 \u0634\u0645\u0627\u0631\u0647 \u0633\u0647"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8Xmcr,
                                  {
                                    [sty.textmyAssets___8XmcrT1Bxz]: hasVariant(
                                      $state,
                                      "myAssets",
                                      "myAssets"
                                    )
                                  }
                                )}
                              >
                                {
                                  "\u0627\u0631\u0632\u0634 \u0631\u0648\u0632: \u06f9\u06f4\u06f8\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4Apn9,
                                  {
                                    [sty.freeBoxmyAssets___4Apn9T1Bxz]:
                                      hasVariant($state, "myAssets", "myAssets")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gpOhV,
                                    {
                                      [sty.textmyAssets__gpOhVt1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u0645\u062a\u0631\u0627\u0698 \u062e\u0631\u06cc\u062f\u0627\u0631\u06cc \u0634\u062f\u0647:"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__igBlj,
                                    {
                                      [sty.textmyAssets__igBljT1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {"\u06f1 \u0645\u062a\u0631"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p0JU,
                                  {
                                    [sty.freeBoxmyAssets__p0JUt1Bxz]:
                                      hasVariant($state, "myAssets", "myAssets")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mjSrj,
                                    {
                                      [sty.textmyAssets__mjSrjt1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u0645\u0628\u0644\u063a \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc:"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__opohq,
                                    {
                                      [sty.textmyAssets__opohqT1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u06f1\u06f0 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                                  }
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jaQk9,
                                  {
                                    [sty.freeBoxmyAssets__jaQk9T1Bxz]:
                                      hasVariant($state, "myAssets", "myAssets")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__tecE5,
                                    {
                                      [sty.textmyAssets__tecE5T1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u0642\u06cc\u0645\u062a \u0647\u0631 \u0645\u062a\u0631 \u0645\u0631\u0628\u0639:"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__j7Ffw,
                                    {
                                      [sty.textmyAssets__j7FfwT1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u06f1\u06f0 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u062a\u0648\u0645\u0627\u0646"
                                  }
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dB47R,
                                  {
                                    [sty.freeBoxmyAssets__dB47Rt1Bxz]:
                                      hasVariant($state, "myAssets", "myAssets")
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5Cy1O,
                                    {
                                      [sty.textmyAssets___5Cy1OT1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {
                                    "\u0633\u0648\u062f \u062f\u0627\u0631\u0627\u06cc\u06cc:"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jCpRw,
                                    {
                                      [sty.textmyAssets__jCpRwT1Bxz]:
                                        hasVariant(
                                          $state,
                                          "myAssets",
                                          "myAssets"
                                        )
                                    }
                                  )}
                                >
                                  {"\u06f3 \u062f\u0631\u0635\u062f"}
                                </div>
                              </div>
                            </div>
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cq0Ya,
                                {
                                  [sty.freeBoxmyAssets__cq0Yat1Bxz]: hasVariant(
                                    $state,
                                    "myAssets",
                                    "myAssets"
                                  )
                                }
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.sarvButton3,
                                    {
                                      [sty.sarvButton3myAssets]: hasVariant(
                                        $state,
                                        "myAssets",
                                        "myAssets"
                                      )
                                    }
                                  ),

                                  color: "persianGreen",
                                  onSelectedChange: (...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "sarvButton3",
                                      currentIndex,
                                      "selected"
                                    ])(eventArgs[0]);
                                  },
                                  selected: p.generateStateValueProp($state, [
                                    "sarvButton3",
                                    currentIndex,
                                    "selected"
                                  ])
                                };
                                p.initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "sarvButton3[].selected",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],

                                  [currentIndex]
                                );

                                return (
                                  <SarvButton
                                    data-plasmic-name={"sarvButton3"}
                                    data-plasmic-override={
                                      overrides.sarvButton3
                                    }
                                    {...child$Props}
                                  >
                                    {
                                      "\u062e\u0631\u06cc\u062f \u0645\u062c\u062f\u062f"
                                    }
                                  </SarvButton>
                                );
                              })()}
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.sarvButton4,
                                    {
                                      [sty.sarvButton4myAssets]: hasVariant(
                                        $state,
                                        "myAssets",
                                        "myAssets"
                                      )
                                    }
                                  ),

                                  onSelectedChange: (...eventArgs) => {
                                    p.generateStateOnChangeProp($state, [
                                      "sarvButton4",
                                      currentIndex,
                                      "selected"
                                    ])(eventArgs[0]);
                                  },
                                  selected: p.generateStateValueProp($state, [
                                    "sarvButton4",
                                    currentIndex,
                                    "selected"
                                  ])
                                };
                                p.initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "sarvButton4[].selected",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],

                                  [currentIndex]
                                );

                                return (
                                  <SarvButton
                                    data-plasmic-name={"sarvButton4"}
                                    data-plasmic-override={
                                      overrides.sarvButton4
                                    }
                                    {...child$Props}
                                  >
                                    {"\u0641\u0631\u0648\u0634"}
                                  </SarvButton>
                                );
                              })()}
                            </p.Stack>
                          </p.Stack>
                        ))}
                      </div>
                    </div>
                  ) : null}
                  <section
                    className={classNames(
                      projectcss.all,
                      sty.section__afE4D,
                      "collapse",
                      {
                        [sty.sectionmyTransactions__afE4DghR]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      }
                    )}
                  >
                    {([2, 3, 4] ?? []).map((currentItem, currentIndex) =>
                      (() => {
                        const child$Props = {
                          activeKey: p.generateStateValueProp($state, [
                            "antdCollapse",
                            currentIndex,
                            "activeKey"
                          ]),

                          bordered: false,
                          className: classNames(
                            "__wab_instance",
                            sty.antdCollapse,
                            {
                              [sty.antdCollapsemyTransactions]: hasVariant(
                                $state,
                                "myTransactions",
                                "myTransactions"
                              )
                            }
                          ),

                          key: currentIndex,
                          onChange: p.generateStateOnChangeProp($state, [
                            "antdCollapse",
                            currentIndex,
                            "activeKey"
                          ])
                        };
                        p.initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "activeKey",
                              plasmicStateName: "antdCollapse[].activeKey"
                            }
                          ],

                          [currentIndex],
                          undefined ?? {},
                          child$Props
                        );

                        p.initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "antdCollapse[].activeKey",
                              initFunc: ({ $props, $state, $queries }) => ["1"]
                            }
                          ],

                          [currentIndex]
                        );

                        return (
                          <Collapse
                            data-plasmic-name={"antdCollapse"}
                            data-plasmic-override={overrides.antdCollapse}
                            {...child$Props}
                          >
                            <CollapsePanel
                              data-plasmic-name={"antdCollapsePanel"}
                              data-plasmic-override={
                                overrides.antdCollapsePanel
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.antdCollapsePanel
                              )}
                              header={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___46Tn,
                                    {
                                      [sty.freeBoxmyTransactions___46TnGhR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lGwk,
                                      {
                                        [sty.textmyTransactions__lGwkGhR]:
                                          hasVariant(
                                            $state,
                                            "myTransactions",
                                            "myTransactions"
                                          )
                                      }
                                    )}
                                  >
                                    {
                                      "\u0627\u0631\u0632\u0634 \u0645\u0639\u0627\u0645\u0644\u0647: \u06f1\u06f0\u06f0 \u0647\u0632\u0627\u0631 \u062a\u0648\u0645\u0627\u0646"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__aAqXq,
                                      {
                                        [sty.freeBoxmyTransactions__aAqXqghR]:
                                          hasVariant(
                                            $state,
                                            "myTransactions",
                                            "myTransactions"
                                          )
                                      }
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dqCQk
                                      )}
                                    >
                                      {"\u062e\u0631\u06cc\u062f"}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__a5Fbu,
                                        {
                                          [sty.textmyTransactions__a5FbughR]:
                                            hasVariant(
                                              $state,
                                              "myTransactions",
                                              "myTransactions"
                                            )
                                        }
                                      )}
                                    >
                                      {
                                        "\u0641\u0631\u0648\u062f\u06af\u0627\u0647 \u067e\u06cc\u0627\u0645"
                                      }
                                    </div>
                                  </div>
                                </div>
                              }
                              key={``}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dawQ,
                                  {
                                    [sty.freeBoxmyTransactions__dawQGhR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mym4Q
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__e2Gc1,
                                    {
                                      [sty.textmyTransactions__e2Gc1GhR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "متراژ (متر مربع)";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lqXf2,
                                  {
                                    [sty.freeBoxmyTransactions__lqXf2GhR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kD8P
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___72Sz3,
                                    {
                                      [sty.textmyTransactions___72Sz3GhR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "قیمت متر مربع (تومان)";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ew8C8,
                                  {
                                    [sty.freeBoxmyTransactions__ew8C8GhR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__h2YN
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__uw3Cv,
                                    {
                                      [sty.textmyTransactions__uw3CvghR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "مبلغ کمیسیون (۲ درصد از معامله)";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__j3ERe,
                                  {
                                    [sty.freeBoxmyTransactions__j3EReGhR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sx0Pz
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hc8Z,
                                    {
                                      [sty.textmyTransactions__hc8ZGhR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "مالیات (۹ درصد از کمیسیون)";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__llLvL,
                                  {
                                    [sty.freeBoxmyTransactions__llLvLghR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__omWe
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__llEst,
                                    {
                                      [sty.textmyTransactions__llEstGhR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "وضعیت";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lJTm5,
                                  {
                                    [sty.freeBoxmyTransactions__lJTm5GhR]:
                                      hasVariant(
                                        $state,
                                        "myTransactions",
                                        "myTransactions"
                                      )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__h7Ey
                                  )}
                                >
                                  {"Insert text here"}
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xnXsF,
                                    {
                                      [sty.textmyTransactions__xnXsFghR]:
                                        hasVariant(
                                          $state,
                                          "myTransactions",
                                          "myTransactions"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "تاریخ و ساعت";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Insert text here";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </CollapsePanel>
                          </Collapse>
                        );
                      })()
                    )}
                  </section>
                </section>
                <div
                  data-plasmic-name={"summaryAssets"}
                  data-plasmic-override={overrides.summaryAssets}
                  className={classNames(projectcss.all, sty.summaryAssets, {
                    [sty.summaryAssetsmyAssets]: hasVariant(
                      $state,
                      "myAssets",
                      "myAssets"
                    ),

                    [sty.summaryAssetsmyTransactions]: hasVariant(
                      $state,
                      "myTransactions",
                      "myTransactions"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__opIEp,
                      "chart",
                      {
                        [sty.freeBoxmyAssets__opIEpT1Bxz]: hasVariant(
                          $state,
                          "myAssets",
                          "myAssets"
                        ),

                        [sty.freeBoxmyTransactions__opIEpGhR]: hasVariant(
                          $state,
                          "myTransactions",
                          "myTransactions"
                        )
                      }
                    )}
                  >
                    <SimpleChart
                      className={classNames(
                        "__wab_instance",
                        sty.chart__zTtnr,
                        {
                          [sty.chartmyAssets__zTtnrt1Bxz]: hasVariant(
                            $state,
                            "myAssets",
                            "myAssets"
                          ),

                          [sty.chartmyTransactions__zTtnrghR]: hasVariant(
                            $state,
                            "myTransactions",
                            "myTransactions"
                          )
                        }
                      )}
                      data={[
                        { region: "سرو", "سرمایه گذاری": 2000000, سود: 100000 },
                        {
                          region: "پیام",
                          "سرمایه گذاری": 200000000,
                          سود: 20000000
                        },
                        {
                          region: "اقاقیا",
                          "سرمایه گذاری": 35000000,
                          سود: 100000
                        }
                      ]}
                      direction={"horizontal"}
                      interactive={false}
                      labelField={"region"}
                      stacked={false}
                      type={"bar"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dn6OT,
                        {
                          [sty.textmyAssets__dn6OTt1Bxz]: hasVariant(
                            $state,
                            "myAssets",
                            "myAssets"
                          )
                        }
                      )}
                    >
                      {
                        "\u062d\u062c\u0645 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc\n\u0648 \u0633\u0648\u062f \u0628\u0647 \u062a\u0641\u06a9\u06cc\u06a9 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627 \u0628\u0631 \u062d\u0633\u0628 \u062a\u0648\u0645\u0627\u0646"
                      }
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__my51X, {
                      [sty.freeBoxmyAssets__my51XT1Bxz]: hasVariant(
                        $state,
                        "myAssets",
                        "myAssets"
                      )
                    })}
                  >
                    <SimpleChart
                      className={classNames(
                        "__wab_instance",
                        sty.chart__x2H7N,
                        {
                          [sty.chartmyAssets__x2H7NT1Bxz]: hasVariant(
                            $state,
                            "myAssets",
                            "myAssets"
                          ),

                          [sty.chartmyTransactions__x2H7NGhR]: hasVariant(
                            $state,
                            "myTransactions",
                            "myTransactions"
                          )
                        }
                      )}
                      data={[
                        { region: "سرو", متراژ: 10 },
                        { region: "پیام", متراژ: 200 },
                        { region: "اقاقیا", متراژ: 50 }
                      ]}
                      direction={"horizontal"}
                      interactive={false}
                      labelField={"region"}
                      stacked={false}
                      type={"bar"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kbRxj,
                        {
                          [sty.textmyAssets__kbRxjT1Bxz]: hasVariant(
                            $state,
                            "myAssets",
                            "myAssets"
                          )
                        }
                      )}
                    >
                      {
                        "\u062d\u062c\u0645 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u0628\u0631 \u062d\u0633\u0628 \u0645\u062a\u0631\u0627\u0698"
                      }
                    </div>
                  </div>
                </div>
              </div>
            </p.Stack>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footermyTransactions]: hasVariant(
                $state,
                "myTransactions",
                "myTransactions"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "profile",
    "avatar",
    "sarvButton",
    "sarvButton2",
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "state",
    "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631",
    "\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644",
    "\u0633\u0648\u062f\u0644",
    "\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627",
    "myAssts",
    "sarvButton3",
    "sarvButton4",
    "antdCollapse",
    "antdCollapsePanel",
    "summaryAssets",
    "footer"
  ],

  header: ["header"],
  profile: ["profile", "avatar", "sarvButton", "sarvButton2"],
  avatar: ["avatar"],
  sarvButton: ["sarvButton"],
  sarvButton2: ["sarvButton2"],
  walletSide: [
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "state",
    "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631",
    "\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644",
    "\u0633\u0648\u062f\u0644",
    "\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627",
    "myAssts",
    "sarvButton3",
    "sarvButton4",
    "antdCollapse",
    "antdCollapsePanel"
  ],

  transactionHistory: ["transactionHistory"],
  deposit3: ["deposit3"],
  withdrawal: ["withdrawal"],
  state: [
    "state",
    "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631",
    "\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644",
    "\u0633\u0648\u062f\u0644",
    "\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627"
  ],

  مزانسرماهذار: [
    "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631"
  ],

  موجودفول: ["\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644"],
  سودل: ["\u0633\u0648\u062f\u0644"],
  تعدادروهها: ["\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627"],
  myAssts: ["myAssts", "sarvButton3", "sarvButton4"],
  sarvButton3: ["sarvButton3"],
  sarvButton4: ["sarvButton4"],
  antdCollapse: ["antdCollapse", "antdCollapsePanel"],
  antdCollapsePanel: ["antdCollapsePanel"],
  summaryAssets: ["summaryAssets"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAsset__ArgProps,
          internalVariantPropNames: PlasmicAsset__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAsset__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsset";
  } else {
    func.displayName = `PlasmicAsset.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"aUZyoBv2znBVirsF7auAUJ"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "aUZyoBv2znBVirsF7auAUJ"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAsset = Object.assign(
  // Top-level PlasmicAsset renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    profile: makeNodeComponent("profile"),
    avatar: makeNodeComponent("avatar"),
    sarvButton: makeNodeComponent("sarvButton"),
    sarvButton2: makeNodeComponent("sarvButton2"),
    walletSide: makeNodeComponent("walletSide"),
    transactionHistory: makeNodeComponent("transactionHistory"),
    deposit3: makeNodeComponent("deposit3"),
    withdrawal: makeNodeComponent("withdrawal"),
    state: makeNodeComponent("state"),
    مزانسرماهذار: makeNodeComponent(
      "\u0645\u0632\u0627\u0646\u0633\u0631\u0645\u0627\u0647\u0630\u0627\u0631"
    ),

    موجودفول: makeNodeComponent(
      "\u0645\u0648\u062c\u0648\u062f\u0641\u0648\u0644"
    ),

    سودل: makeNodeComponent("\u0633\u0648\u062f\u0644"),
    تعدادروهها: makeNodeComponent(
      "\u062a\u0639\u062f\u0627\u062f\u0631\u0648\u0647\u0647\u0627"
    ),

    myAssts: makeNodeComponent("myAssts"),
    sarvButton3: makeNodeComponent("sarvButton3"),
    sarvButton4: makeNodeComponent("sarvButton4"),
    antdCollapse: makeNodeComponent("antdCollapse"),
    antdCollapsePanel: makeNodeComponent("antdCollapsePanel"),
    summaryAssets: makeNodeComponent("summaryAssets"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicAsset
    internalVariantProps: PlasmicAsset__VariantProps,
    internalArgProps: PlasmicAsset__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAsset;
/* prettier-ignore-end */
