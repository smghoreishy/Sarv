// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: riA0NYS3NAT6
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import LoadingComponent from "../../LoadingComponent"; // plasmic-import: HDv_HWbccKet/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicProjectPageLeftSide.module.css"; // plasmic-import: riA0NYS3NAT6/css
import AttachmentSvgrepoComsvgIcon from "./icons/PlasmicIcon__AttachmentSvgrepoComsvg"; // plasmic-import: 24tV0FhF8-p2/icon
import LocationPinSvgrepoComsvgIcon from "./icons/PlasmicIcon__LocationPinSvgrepoComsvg"; // plasmic-import: 6vxvN8sq-cbC/icon

createPlasmicElementProxy;

export const PlasmicProjectPageLeftSide__VariantProps = new Array(
  "projectProgress3"
);

export const PlasmicProjectPageLeftSide__ArgProps = new Array(
  "id",
  "onIdChange",
  "onImagesChange",
  "projectInformations",
  "onProjectInformationsChange",
  "projectProgress2",
  "onProjectProgress2Change",
  "projectdetails",
  "onProjectdetailsChange",
  "projectDocuments2",
  "onProjectDocuments2Change",
  "projectAdress",
  "onProjectAdressChange",
  "projectMap",
  "onProjectMapChange",
  "onIsLoadingLeftChange"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectPageLeftSide__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "id",
        type: "writable",
        variableType: "number",
        valueProp: "id",
        onChangeProp: "onIdChange"
      },
      {
        path: "زارششرفت.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "projectProgress3", "projectProgress3")
            ? "lineButtonSelected"
            : undefined
      },
      {
        path: "اطلاعاتروه.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "projectProgress3", "projectProgress3")
            ? []
            : "lineButtonSelected"
      },
      {
        path: "images",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),
        onChangeProp: "onImagesChange"
      },
      {
        path: "projectInformations",
        type: "writable",
        variableType: "text",
        valueProp: "projectInformations",
        onChangeProp: "onProjectInformationsChange"
      },
      {
        path: "projectProgress2",
        type: "writable",
        variableType: "text",
        valueProp: "projectProgress2",
        onChangeProp: "onProjectProgress2Change"
      },
      {
        path: "projectdetails",
        type: "writable",
        variableType: "text",
        valueProp: "projectdetails",
        onChangeProp: "onProjectdetailsChange"
      },
      {
        path: "projectDocuments2",
        type: "writable",
        variableType: "array",
        valueProp: "projectDocuments2",
        onChangeProp: "onProjectDocuments2Change"
      },
      {
        path: "projectAdress",
        type: "writable",
        variableType: "text",
        valueProp: "projectAdress",
        onChangeProp: "onProjectAdressChange"
      },
      {
        path: "projectMap",
        type: "writable",
        variableType: "text",
        valueProp: "projectMap",
        onChangeProp: "onProjectMapChange"
      },
      {
        path: "projectProgress3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.projectProgress3
      },
      {
        path: "isLoadingLeft",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.fetchById.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        onChangeProp: "onIsLoadingLeftChange"
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    items: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "77d8b7ed-0456-4827-9479-9b5fb0186549",
            userArgs: {},
            cacheKey: "plasmic.$.lX_M8bpHfvuX.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    fetchById: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "019629de-0210-4b64-aeb0-5f3a8fb09afa",
            userArgs: {
              filters: [$state.id]
            },
            cacheKey: "plasmic.$.GaUUTC_lRbHQ.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_landing_page_starter_css.plasmic_tokens,
        sty.root,
        "sliderPage",
        {
          [sty.rootprojectProgress3]: hasVariant(
            $state,
            "projectProgress3",
            "projectProgress3"
          )
        }
      )}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <ph.DataCtxReader>
            {$ctx => (
              <LoadingComponent
                data-plasmic-name={"loadingComponent"}
                data-plasmic-override={overrides.loadingComponent}
                className={classNames("__wab_instance", sty.loadingComponent)}
              />
            )}
          </ph.DataCtxReader>
        }
      >
        <ph.DataCtxReader>
          {$ctx => (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__xcN17)}>
                <Slider
                  data-plasmic-name={"sliderCarousel"}
                  data-plasmic-override={overrides.sliderCarousel}
                  className={classNames("__wab_instance", sty.sliderCarousel)}
                >
                  {(
                    (() => {
                      try {
                        return $queries.fetchById.data[0]["image array"].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kZ7NT)}
                      key={currentIndex}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img, "sliderImg")}
                        displayHeight={"523px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        src={(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://static1.plasmic.app/components/react-slick/slide1.png";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  ))}
                </Slider>
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__m6Hkc)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6O3VV)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hDxQq)}
                  >
                    <SarvButton
                      data-plasmic-name={
                        "\u0632\u0627\u0631\u0634\u0634\u0631\u0641\u062a"
                      }
                      data-plasmic-override={overrides.زارششرفت}
                      className={classNames("__wab_instance", sty.زارششرفت, {
                        [sty.زارششرفتprojectProgress3]: hasVariant(
                          $state,
                          "projectProgress3",
                          "projectProgress3"
                        )
                      })}
                      color={"lineButton"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateProjectProgress3"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "3qkYFn99bgAX",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "vgroup"
                                  },
                                  () => "projectProgress3"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "3qkYFn99bgAX",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "operation"
                                  },
                                  () => 4
                                ),

                                value: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "3qkYFn99bgAX",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "value"
                                  },
                                  () => "projectProgress3"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "3qkYFn99bgAX",
                                  componentUuid: "riA0NYS3NAT6"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, true);
                                    return true;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateProjectProgress3"] ===
                            "object" &&
                          typeof $steps["updateProjectProgress3"].then ===
                            "function"
                        ) {
                          $steps["updateProjectProgress3"] =
                            await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariant",
                                interactionUuid: "3qkYFn99bgAX",
                                componentUuid: "riA0NYS3NAT6"
                              },
                              $steps["updateProjectProgress3"]
                            );
                        }
                      }}
                      onSelectedChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "زارششرفت",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      selected={p.generateStateValueProp($state, [
                        "زارششرفت",
                        "selected"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cnrr5
                        )}
                      >
                        {
                          "\u06af\u0632\u0627\u0631\u0634 \u067e\u06cc\u0634\u0631\u0641\u062a"
                        }
                      </div>
                    </SarvButton>
                    <SarvButton
                      data-plasmic-name={
                        "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u0631\u0648\u0647"
                      }
                      data-plasmic-override={overrides.اطلاعاتروه}
                      className={classNames("__wab_instance", sty.اطلاعاتروه, {
                        [sty.اطلاعاتروهprojectProgress3]: hasVariant(
                          $state,
                          "projectProgress3",
                          "projectProgress3"
                        )
                      })}
                      color={
                        hasVariant(
                          $state,
                          "projectProgress3",
                          "projectProgress3"
                        )
                          ? "lineButton"
                          : "lineButton"
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["updateProjectProgress3"] = true
                          ? (() => {
                              const actionArgs = {
                                vgroup: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "Dw0CLtmOOfvT",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "vgroup"
                                  },
                                  () => "projectProgress3"
                                ),

                                operation: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "Dw0CLtmOOfvT",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "operation"
                                  },
                                  () => 6
                                ),

                                value: __wrapUserFunction(
                                  {
                                    type: "InteractionArgLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "Dw0CLtmOOfvT",
                                    componentUuid: "riA0NYS3NAT6",
                                    argName: "value"
                                  },
                                  () => "projectProgress3"
                                )
                              };
                              return __wrapUserFunction(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "Dw0CLtmOOfvT",
                                  componentUuid: "riA0NYS3NAT6"
                                },
                                () =>
                                  (({ vgroup, value }) => {
                                    if (typeof value === "string") {
                                      value = [value];
                                    }
                                    p.set($state, vgroup, false);
                                    return false;
                                  })?.apply(null, [actionArgs]),
                                actionArgs
                              );
                            })()
                          : undefined;
                        if (
                          typeof $steps["updateProjectProgress3"] ===
                            "object" &&
                          typeof $steps["updateProjectProgress3"].then ===
                            "function"
                        ) {
                          $steps["updateProjectProgress3"] =
                            await __wrapUserPromise(
                              {
                                type: "InteractionLoc",
                                actionName: "updateVariant",
                                interactionUuid: "Dw0CLtmOOfvT",
                                componentUuid: "riA0NYS3NAT6"
                              },
                              $steps["updateProjectProgress3"]
                            );
                        }
                      }}
                      onSelectedChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "اطلاعاتروه",
                          "selected"
                        ])(eventArgs[0]);
                      }}
                      selected={p.generateStateValueProp($state, [
                        "اطلاعاتروه",
                        "selected"
                      ])}
                      submitsForm={false}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vr9F
                        )}
                      >
                        {
                          "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0631\u0648\u0698\u0647"
                        }
                      </div>
                    </SarvButton>
                  </p.Stack>
                  <div
                    data-plasmic-name={"projectInf"}
                    data-plasmic-override={overrides.projectInf}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.projectInf,
                      {
                        [sty.projectInfprojectProgress3]: hasVariant(
                          $state,
                          "projectProgress3",
                          "projectProgress3"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.fetchById.data[0].description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"projectProgress"}
                    data-plasmic-override={overrides.projectProgress}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.projectProgress,
                      {
                        [sty.projectProgressprojectProgress3]: hasVariant(
                          $state,
                          "projectProgress3",
                          "projectProgress3"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.projectProgress2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u06af\u0632\u0627\u0631\u0634\u06cc \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nI382)}
                >
                  <div
                    data-plasmic-name={"projectSpecifications"}
                    data-plasmic-override={overrides.projectSpecifications}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.projectSpecifications
                    )}
                  >
                    {
                      "\u0648\u06cc\u0698\u06af\u06cc \u0647\u0627\u06cc \u067e\u0631\u0648\u0698\u0647"
                    }
                  </div>
                  <div
                    data-plasmic-name={"specificationDetails"}
                    data-plasmic-override={overrides.specificationDetails}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.specificationDetails
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.fetchById.data[0].title22;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pzp)}
                >
                  <div
                    data-plasmic-name={"projectDocuments"}
                    data-plasmic-override={overrides.projectDocuments}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.projectDocuments
                    )}
                  >
                    {
                      "\u0645\u0633\u062a\u0646\u062f\u0627\u062a \u067e\u0631\u0648\u0698\u0647"
                    }
                  </div>
                  {(
                    (() => {
                      try {
                        return $queries.fetchById.data[0]["files array"].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })() ?? []
                  ).map((currentItem, currentIndex) => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rxvu7)}
                      key={currentIndex}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return currentItem.url;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Some link text";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </p.PlasmicLink>
                      <AttachmentSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__haUEh)}
                        role={"img"}
                      />
                    </div>
                  ))}
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0NqQp)}
                >
                  <div
                    data-plasmic-name={"map"}
                    data-plasmic-override={overrides.map}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.map
                    )}
                  >
                    {"\u0645\u062d\u0644 \u067e\u0631\u0648\u0698\u0647"}
                  </div>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={(() => {
                        try {
                          return $queries.fetchById.data[0]["location-map"];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d12960.761337204207!2d51.4834774!3d35.69693355!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3f8e03f59b014ca5%3A0x76a618025877a10f!2z2YHZhNqp2Ycg2K_ZiNmFINmG24zYsdmI2YfZiNin24zbjA!5e0!3m2!1sen!2s!4v1693860758643!5m2!1sen!2s" width="1180" height="300" style="border:0; border-radius:15px" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>';
                          }
                          throw e;
                        }
                      })()}
                    />
                  </section>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__irvLp)}
                  >
                    <div
                      data-plasmic-name={"address"}
                      data-plasmic-override={overrides.address}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.address
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.fetchById.data[0].address;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <LocationPinSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__cbmwx)}
                      role={"img"}
                    />
                  </div>
                </p.Stack>
              </p.Stack>
            </React.Fragment>
          )}
        </ph.DataCtxReader>
      </LoadingBoundary>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "loadingBoundary",
    "loadingComponent",
    "sliderCarousel",
    "img",
    "\u0632\u0627\u0631\u0634\u0634\u0631\u0641\u062a",
    "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u0631\u0648\u0647",
    "projectInf",
    "projectProgress",
    "projectSpecifications",
    "specificationDetails",
    "projectDocuments",
    "link",
    "map",
    "section",
    "embedHtml",
    "address"
  ],

  loadingBoundary: [
    "loadingBoundary",
    "loadingComponent",
    "sliderCarousel",
    "img",
    "\u0632\u0627\u0631\u0634\u0634\u0631\u0641\u062a",
    "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u0631\u0648\u0647",
    "projectInf",
    "projectProgress",
    "projectSpecifications",
    "specificationDetails",
    "projectDocuments",
    "link",
    "map",
    "section",
    "embedHtml",
    "address"
  ],

  loadingComponent: ["loadingComponent"],
  sliderCarousel: ["sliderCarousel", "img"],
  img: ["img"],
  زارششرفت: ["\u0632\u0627\u0631\u0634\u0634\u0631\u0641\u062a"],
  اطلاعاتروه: ["\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u0631\u0648\u0647"],
  projectInf: ["projectInf"],
  projectProgress: ["projectProgress"],
  projectSpecifications: ["projectSpecifications"],
  specificationDetails: ["specificationDetails"],
  projectDocuments: ["projectDocuments"],
  link: ["link"],
  map: ["map"],
  section: ["section", "embedHtml"],
  embedHtml: ["embedHtml"],
  address: ["address"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectPageLeftSide__ArgProps,
          internalVariantPropNames: PlasmicProjectPageLeftSide__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProjectPageLeftSide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectPageLeftSide";
  } else {
    func.displayName = `PlasmicProjectPageLeftSide.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectPageLeftSide = Object.assign(
  // Top-level PlasmicProjectPageLeftSide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    loadingComponent: makeNodeComponent("loadingComponent"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    img: makeNodeComponent("img"),
    زارششرفت: makeNodeComponent(
      "\u0632\u0627\u0631\u0634\u0634\u0631\u0641\u062a"
    ),

    اطلاعاتروه: makeNodeComponent(
      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a\u0631\u0648\u0647"
    ),

    projectInf: makeNodeComponent("projectInf"),
    projectProgress: makeNodeComponent("projectProgress"),
    projectSpecifications: makeNodeComponent("projectSpecifications"),
    specificationDetails: makeNodeComponent("specificationDetails"),
    projectDocuments: makeNodeComponent("projectDocuments"),
    link: makeNodeComponent("link"),
    map: makeNodeComponent("map"),
    section: makeNodeComponent("section"),
    embedHtml: makeNodeComponent("embedHtml"),
    address: makeNodeComponent("address"),
    // Metadata about props expected for PlasmicProjectPageLeftSide
    internalVariantProps: PlasmicProjectPageLeftSide__VariantProps,
    internalArgProps: PlasmicProjectPageLeftSide__ArgProps
  }
);

export default PlasmicProjectPageLeftSide;
/* prettier-ignore-end */
