// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: tFWqGnU-k6Ek
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7UkPT0uRfk9/codeComponent
import Header from "../../Header"; // plasmic-import: hdkwfO6DN97t/component
import { AntdAvatar } from "@plasmicpkgs/antd5/skinny/registerAvatar"; // plasmic-import: nqcsn8n56U/codeComponent
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect"; // plasmic-import: OvH7ENd3m7ug/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import Footer from "../../Footer"; // plasmic-import: wozDst_MhUug/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicWallet.module.css"; // plasmic-import: tFWqGnU-k6Ek/css

createPlasmicElementProxy;

export const PlasmicWallet__VariantProps = new Array(
  "withdraw",
  "withdrawAddCard",
  "deposit"
);

export const PlasmicWallet__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWallet__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sarvButton2.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "transactionHistory.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softBlueSelected"
      },
      {
        path: "withdrawal.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec(
          "selectedRowKeys",
          RichTable_Helpers
        )
      },
      {
        path: "withdraw",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withdraw
      },
      {
        path: "deposit3.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "withdraw", "withdraw")
            ? "softBlueSelected"
            : undefined
      },
      {
        path: "sarvButton3.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "sarvButton4.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "withdrawAddCard",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withdrawAddCard
      },
      {
        path: "sarvButton5.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "deposit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.deposit
      },
      {
        path: "sarvButton6.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sarvButton7.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sarvButton10.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sarvButton11.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "sarvButton8.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "c73ec5af-e060-49e8-8761-08709dc88f70",
            userArgs: {},
            cacheKey: "plasmic.$.3PoBLQhWkxoN.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    ),

    componentData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "745f5b06-5a9d-4296-a528-555402143d0a",
            userArgs: {},
            cacheKey: "plasmic.$.GVWu6NOt_7Gr.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_landing_page_starter_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootdeposit]: hasVariant($state, "deposit", "deposit"),
              [sty.rootwithdrawAddCard]: hasVariant(
                $state,
                "withdrawAddCard",
                "withdrawAddCard"
              ),

              [sty.rootwithdraw]: hasVariant($state, "withdraw", "withdraw")
            }
          )}
        >
          <Fetcher
            data-plasmic-name={"dataFetcher"}
            data-plasmic-override={overrides.dataFetcher}
            className={classNames("__wab_instance", sty.dataFetcher)}
            queries={$queries}
          >
            {$queries => (
              <React.Fragment>
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section, {
                    [sty.sectiondeposit]: hasVariant(
                      $state,
                      "deposit",
                      "deposit"
                    ),

                    [sty.sectionwithdrawAddCard]: hasVariant(
                      $state,
                      "withdrawAddCard",
                      "withdrawAddCard"
                    ),

                    [sty.sectionwithdraw]: hasVariant(
                      $state,
                      "withdraw",
                      "withdraw"
                    )
                  })}
                >
                  <section
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <Header
                      className={classNames(
                        "__wab_instance",
                        sty.header__neqLf
                      )}
                    />
                  </section>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c8Cju, {
                      [sty.freeBoxdeposit__c8CjuASns8]: hasVariant(
                        $state,
                        "deposit",
                        "deposit"
                      ),

                      [sty.freeBoxwithdraw__c8CjuQvLLe]: hasVariant(
                        $state,
                        "withdraw",
                        "withdraw"
                      )
                    })}
                  >
                    <section
                      data-plasmic-name={"profile"}
                      data-plasmic-override={overrides.profile}
                      className={classNames(projectcss.all, sty.profile, {
                        [sty.profilewithdrawAddCard]: hasVariant(
                          $state,
                          "withdrawAddCard",
                          "withdrawAddCard"
                        ),

                        [sty.profilewithdraw]: hasVariant(
                          $state,
                          "withdraw",
                          "withdraw"
                        )
                      })}
                    >
                      <AntdAvatar
                        data-plasmic-name={"avatar"}
                        data-plasmic-override={overrides.avatar}
                        className={classNames("__wab_instance", sty.avatar)}
                        letters={"AB"}
                        size={"large"}
                        src={"/plasmic/sarv/images/photo14020615214947Jpeg.jpg"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3X4ED
                        )}
                      >
                        {
                          "\u0645\u062d\u0645\u062f \u0642\u0631\u06cc\u0634\u06cc"
                        }
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d5Cnl
                        )}
                      >
                        <SarvButton
                          data-plasmic-name={"sarvButton"}
                          data-plasmic-override={overrides.sarvButton}
                          className={classNames(
                            "__wab_instance",
                            sty.sarvButton
                          )}
                          color={"persianGreen"}
                          onClick={async event => {
                            const $steps = {};
                            $steps["goToWallet"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "navigation",
                                        interactionUuid: "SlGYkcoGJJcC",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "destination"
                                      },
                                      () => `/wallet`
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "navigation",
                                      interactionUuid: "SlGYkcoGJJcC",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ destination }) => {
                                        __nextRouter?.push(destination);
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["goToWallet"] === "object" &&
                              typeof $steps["goToWallet"].then === "function"
                            ) {
                              $steps["goToWallet"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "SlGYkcoGJJcC",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["goToWallet"]
                              );
                            }
                          }}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "sarvButton",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "sarvButton",
                            "selected"
                          ])}
                        >
                          {"\u06a9\u06cc\u0641 \u067e\u0648\u0644"}
                        </SarvButton>
                        <SarvButton
                          data-plasmic-name={"sarvButton2"}
                          data-plasmic-override={overrides.sarvButton2}
                          className={classNames(
                            "__wab_instance",
                            sty.sarvButton2
                          )}
                          color={"softPersianGreen"}
                          onClick={async event => {
                            const $steps = {};
                            $steps["goToAsset"] = true
                              ? (() => {
                                  const actionArgs = {
                                    destination: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "navigation",
                                        interactionUuid: "r7StKsnSEmtT",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "destination"
                                      },
                                      () => `/Assets`
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "navigation",
                                      interactionUuid: "r7StKsnSEmtT",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ destination }) => {
                                        __nextRouter?.push(destination);
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["goToAsset"] === "object" &&
                              typeof $steps["goToAsset"].then === "function"
                            ) {
                              $steps["goToAsset"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "navigation",
                                  interactionUuid: "r7StKsnSEmtT",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["goToAsset"]
                              );
                            }
                          }}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "sarvButton2",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "sarvButton2",
                            "selected"
                          ])}
                        >
                          {
                            "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062f\u0627\u0631\u0627\u06cc\u06cc"
                          }
                        </SarvButton>
                      </p.Stack>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j7Duj,
                          {
                            [sty.freeBoxwithdrawAddCard__j7DuJtaUyu]:
                              hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              )
                          }
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cv8Bv)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"153px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/trees1Png.png",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__catLf)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"153px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/sarv/images/trees1Png.png",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </section>
                    <section
                      data-plasmic-name={"walletSide"}
                      data-plasmic-override={overrides.walletSide}
                      className={classNames(projectcss.all, sty.walletSide, {
                        [sty.walletSidedeposit]: hasVariant(
                          $state,
                          "deposit",
                          "deposit"
                        ),

                        [sty.walletSidewithdrawAddCard]: hasVariant(
                          $state,
                          "withdrawAddCard",
                          "withdrawAddCard"
                        ),

                        [sty.walletSidewithdraw]: hasVariant(
                          $state,
                          "withdraw",
                          "withdraw"
                        )
                      })}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hQslM
                        )}
                      >
                        {
                          "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0634\u0645\u0627"
                        }
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nOz6M
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x7Jt
                          )}
                        >
                          {"\u06f7\u06f7\u06f3"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yymZq,
                            {
                              [sty.textwithdraw__yymZqQvLLe]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                        >
                          {"\u062a\u0648\u0645\u0627\u0646"}
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ly2Op,
                          {
                            [sty.freeBoxwithdraw__ly2OpQvLLe]: hasVariant(
                              $state,
                              "withdraw",
                              "withdraw"
                            )
                          }
                        )}
                      >
                        <SarvButton
                          data-plasmic-name={"transactionHistory"}
                          data-plasmic-override={overrides.transactionHistory}
                          className={classNames(
                            "__wab_instance",
                            sty.transactionHistory,
                            {
                              [sty.transactionHistorydeposit]: hasVariant(
                                $state,
                                "deposit",
                                "deposit"
                              ),

                              [sty.transactionHistorywithdrawAddCard]:
                                hasVariant(
                                  $state,
                                  "withdrawAddCard",
                                  "withdrawAddCard"
                                ),

                              [sty.transactionHistorywithdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                          color={
                            hasVariant($state, "deposit", "deposit")
                              ? "softPersianGreen"
                              : hasVariant(
                                  $state,
                                  "withdrawAddCard",
                                  "withdrawAddCard"
                                )
                              ? "softPersianGreen"
                              : hasVariant($state, "withdraw", "withdraw")
                              ? "softPersianGreen"
                              : "persianGreen"
                          }
                          onClick={async event => {
                            const $steps = {};
                            $steps["updateDeposit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "yTDSmn27Wt-4",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "withdraw"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "yTDSmn27Wt-4",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "yTDSmn27Wt-4",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateDeposit"] === "object" &&
                              typeof $steps["updateDeposit"].then === "function"
                            ) {
                              $steps["updateDeposit"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "yTDSmn27Wt-4",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["updateDeposit"]
                              );
                            }
                            $steps["updateDepositAddCard"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "LwitKPCMy7oR",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "withdrawAddCard"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "LwitKPCMy7oR",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "LwitKPCMy7oR",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateDepositAddCard"] ===
                                "object" &&
                              typeof $steps["updateDepositAddCard"].then ===
                                "function"
                            ) {
                              $steps["updateDepositAddCard"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "LwitKPCMy7oR",
                                    componentUuid: "tFWqGnU-k6Ek"
                                  },
                                  $steps["updateDepositAddCard"]
                                );
                            }
                            $steps["updateDeposit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "bLbH4inLBsmK",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "deposit"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "bLbH4inLBsmK",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "bLbH4inLBsmK",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateDeposit"] === "object" &&
                              typeof $steps["updateDeposit"].then === "function"
                            ) {
                              $steps["updateDeposit"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "bLbH4inLBsmK",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["updateDeposit"]
                              );
                            }
                          }}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "transactionHistory",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "transactionHistory",
                            "selected"
                          ])}
                          submitsForm={false}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634"
                          }
                        </SarvButton>
                        <SarvButton
                          data-plasmic-name={"deposit3"}
                          data-plasmic-override={overrides.deposit3}
                          className={classNames(
                            "__wab_instance",
                            sty.deposit3,
                            {
                              [sty.deposit3deposit]: hasVariant(
                                $state,
                                "deposit",
                                "deposit"
                              ),

                              [sty.deposit3withdrawAddCard]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              ),

                              [sty.deposit3withdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                          color={
                            hasVariant($state, "deposit", "deposit")
                              ? "persianGreen"
                              : hasVariant(
                                  $state,
                                  "withdrawAddCard",
                                  "withdrawAddCard"
                                )
                              ? "softPersianGreen"
                              : hasVariant($state, "withdraw", "withdraw")
                              ? "softPersianGreen"
                              : "softPersianGreen"
                          }
                          onClick={async event => {
                            const $steps = {};
                            $steps["updateDeposit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "dRA_WFTOHwEh",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "deposit"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "dRA_WFTOHwEh",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 4
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "dRA_WFTOHwEh",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, true);
                                        return true;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateDeposit"] === "object" &&
                              typeof $steps["updateDeposit"].then === "function"
                            ) {
                              $steps["updateDeposit"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "dRA_WFTOHwEh",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["updateDeposit"]
                              );
                            }
                            $steps["updateWithdraw"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "UJ8kdOYhyjZu",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "withdraw"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "UJ8kdOYhyjZu",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    ),

                                    value: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "UJ8kdOYhyjZu",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "value"
                                      },
                                      () => "withdraw"
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "UJ8kdOYhyjZu",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateWithdraw"] === "object" &&
                              typeof $steps["updateWithdraw"].then ===
                                "function"
                            ) {
                              $steps["updateWithdraw"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "UJ8kdOYhyjZu",
                                    componentUuid: "tFWqGnU-k6Ek"
                                  },
                                  $steps["updateWithdraw"]
                                );
                            }
                            $steps["updateWithdrawAddCard"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "VUNopF4nUs-u",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "withdrawAddCard"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "VUNopF4nUs-u",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "VUNopF4nUs-u",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateWithdrawAddCard"] ===
                                "object" &&
                              typeof $steps["updateWithdrawAddCard"].then ===
                                "function"
                            ) {
                              $steps["updateWithdrawAddCard"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "VUNopF4nUs-u",
                                    componentUuid: "tFWqGnU-k6Ek"
                                  },
                                  $steps["updateWithdrawAddCard"]
                                );
                            }
                          }}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "deposit3",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "deposit3",
                            "selected"
                          ])}
                        >
                          {
                            "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
                          }
                        </SarvButton>
                        <SarvButton
                          data-plasmic-name={"withdrawal"}
                          data-plasmic-override={overrides.withdrawal}
                          className={classNames(
                            "__wab_instance",
                            sty.withdrawal,
                            {
                              [sty.withdrawaldeposit]: hasVariant(
                                $state,
                                "deposit",
                                "deposit"
                              ),

                              [sty.withdrawalwithdrawAddCard]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              ),

                              [sty.withdrawalwithdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                          color={
                            hasVariant(
                              $state,
                              "withdrawAddCard",
                              "withdrawAddCard"
                            )
                              ? "persianGreen"
                              : hasVariant($state, "withdraw", "withdraw")
                              ? "persianGreen"
                              : "softPersianGreen"
                          }
                          onClick={async event => {
                            const $steps = {};
                            $steps["updateWithdraw"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "Yv3eN8rMlACo",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "withdraw"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "Yv3eN8rMlACo",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 4
                                    ),

                                    value: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "Yv3eN8rMlACo",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "value"
                                      },
                                      () => "withdraw"
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "Yv3eN8rMlACo",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, true);
                                        return true;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateWithdraw"] === "object" &&
                              typeof $steps["updateWithdraw"].then ===
                                "function"
                            ) {
                              $steps["updateWithdraw"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "updateVariant",
                                    interactionUuid: "Yv3eN8rMlACo",
                                    componentUuid: "tFWqGnU-k6Ek"
                                  },
                                  $steps["updateWithdraw"]
                                );
                            }
                            $steps["updateDeposit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    vgroup: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "fVqVDZ9IC2jo",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "vgroup"
                                      },
                                      () => "deposit"
                                    ),

                                    operation: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "fVqVDZ9IC2jo",
                                        componentUuid: "tFWqGnU-k6Ek",
                                        argName: "operation"
                                      },
                                      () => 6
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "fVqVDZ9IC2jo",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    () =>
                                      (({ vgroup, value }) => {
                                        if (typeof value === "string") {
                                          value = [value];
                                        }
                                        p.set($state, vgroup, false);
                                        return false;
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["updateDeposit"] === "object" &&
                              typeof $steps["updateDeposit"].then === "function"
                            ) {
                              $steps["updateDeposit"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "updateVariant",
                                  interactionUuid: "fVqVDZ9IC2jo",
                                  componentUuid: "tFWqGnU-k6Ek"
                                },
                                $steps["updateDeposit"]
                              );
                            }
                          }}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "withdrawal",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "withdrawal",
                            "selected"
                          ])}
                        >
                          {
                            "\u0628\u0631\u062f\u0627\u0634\u062a \u0648\u062c\u0647"
                          }
                        </SarvButton>
                      </p.Stack>
                      <div
                        data-plasmic-name={"history"}
                        data-plasmic-override={overrides.history}
                        className={classNames(
                          projectcss.all,
                          sty.history,
                          "table",
                          {
                            [sty.historydeposit]: hasVariant(
                              $state,
                              "deposit",
                              "deposit"
                            ),

                            [sty.historywithdrawAddCard]: hasVariant(
                              $state,
                              "withdrawAddCard",
                              "withdrawAddCard"
                            ),

                            [sty.historywithdraw]: hasVariant(
                              $state,
                              "withdraw",
                              "withdraw"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__obPRs,
                            {
                              [sty.textwithdrawAddCard__obPRstaUyu]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              )
                            }
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627"
                          }
                        </div>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.table, {
                              [sty.tablewithdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }),
                            data: (() => {
                              try {
                                return $queries.query;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            defaultSize: "large",
                            fields: (() => {
                              const __composite = [
                                { key: "id", fieldId: "id", isHidden: null },
                                {
                                  key: "user phone",
                                  fieldId: "user phone",
                                  isHidden: null
                                },
                                {
                                  key: "created_at",
                                  fieldId: "created_at",
                                  isHidden: null
                                },
                                {
                                  key: "updated_at",
                                  fieldId: "updated_at",
                                  isHidden: null
                                },
                                {
                                  key: "type",
                                  fieldId: "type",
                                  dataType: null,
                                  title: null
                                },
                                {
                                  key: "state",
                                  fieldId: "state",
                                  title: null,
                                  dataType: null
                                },
                                {
                                  key: "amount",
                                  fieldId: "amount",
                                  title: null,
                                  dataType: null,
                                  expr: null
                                },
                                { key: "date", fieldId: "date", title: null },
                                {
                                  key: "description",
                                  fieldId: "description",
                                  isHidden: null
                                },
                                {
                                  key: "source",
                                  fieldId: "source",
                                  isHidden: null
                                }
                              ];

                              __composite["0"]["isHidden"] = true;
                              __composite["1"]["isHidden"] = true;
                              __composite["2"]["isHidden"] = true;
                              __composite["3"]["isHidden"] = true;
                              __composite["4"]["dataType"] = "string";
                              __composite["4"]["title"] =
                                "\u0646\u0648\u0639 \u062a\u0631\u0627\u06a9\u0646\u0634";
                              __composite["5"]["title"] =
                                "\u0648\u0636\u0639\u06cc\u062a";
                              __composite["5"]["dataType"] = "string";
                              __composite["6"]["title"] =
                                "\u0645\u0628\u0644\u063a";
                              __composite["6"]["dataType"] = "number";
                              __composite["6"]["expr"] = (
                                currentItem,
                                currentValue
                              ) => {
                                return (() => {
                                  let toPersisanNumber = n => {
                                    const farsiDigits = [
                                      "۰",
                                      "۱",
                                      "۲",
                                      "۳",
                                      "۴",
                                      "۵",
                                      "۶",
                                      "۷",
                                      "۸",
                                      "۹"
                                    ];

                                    return n
                                      .toString()
                                      .replace(/\d/g, x => farsiDigits[x]);
                                  };
                                  let englishNumber = currentValue;
                                  return (
                                    toPersisanNumber(englishNumber) + " تومان"
                                  );
                                })();
                              };
                              __composite["7"]["title"] =
                                "\u062a\u0627\u0631\u06cc\u062e";
                              __composite["8"]["isHidden"] = true;
                              __composite["9"]["isHidden"] = true;
                              return __composite;
                            })(),
                            hideColumnPicker: true,
                            hideExports: true,
                            hideSearch: true,
                            onRowSelectionChanged: async (...eventArgs) => {
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRowKey",
                                ["table", "selectedRowKey"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRow",
                                ["table", "selectedRow"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRows",
                                ["table", "selectedRows"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "selectedRowKeys",
                                ["table", "selectedRowKeys"],
                                RichTable_Helpers
                              ).apply(null, eventArgs);
                            },
                            pagination: true,
                            scopeClassName: sty["table__instance"],
                            selectedRowKey: p.generateStateValueProp($state, [
                              "table",
                              "selectedRowKey"
                            ]),

                            selectedRowKeys: p.generateStateValueProp($state, [
                              "table",
                              "selectedRowKeys"
                            ]),

                            themeResetClassName: classNames(
                              projectcss.root_reset,
                              projectcss.root_reset_tags,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_landing_page_starter_css.plasmic_tokens
                            )
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "selectedRowKey",
                                plasmicStateName: "table.selectedRowKey"
                              },
                              {
                                name: "selectedRow",
                                plasmicStateName: "table.selectedRow"
                              },
                              {
                                name: "selectedRows",
                                plasmicStateName: "table.selectedRows"
                              },
                              {
                                name: "selectedRowKeys",
                                plasmicStateName: "table.selectedRowKeys"
                              }
                            ],

                            [],
                            RichTable_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <RichTable
                              data-plasmic-name={"table"}
                              data-plasmic-override={overrides.table}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                      <section
                        data-plasmic-name={"withdrawSec"}
                        data-plasmic-override={overrides.withdrawSec}
                        className={classNames(projectcss.all, sty.withdrawSec, {
                          [sty.withdrawSecdeposit]: hasVariant(
                            $state,
                            "deposit",
                            "deposit"
                          ),

                          [sty.withdrawSecwithdrawAddCard]: hasVariant(
                            $state,
                            "withdrawAddCard",
                            "withdrawAddCard"
                          ),

                          [sty.withdrawSecwithdraw]: hasVariant(
                            $state,
                            "withdraw",
                            "withdraw"
                          )
                        })}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yOo3H,
                            {
                              [sty.freeBoxwithdraw__yOo3HQvLLe]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                        >
                          <AntdSelect
                            data-plasmic-name={"select"}
                            data-plasmic-override={overrides.select}
                            bordered={false}
                            className={classNames(
                              "__wab_instance",
                              sty.select,
                              {
                                [sty.selectwithdraw]: hasVariant(
                                  $state,
                                  "withdraw",
                                  "withdraw"
                                )
                              }
                            )}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_landing_page_starter_css.plasmic_tokens
                            )}
                            mode={"single"}
                            onChange={p.generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ])}
                            options={[
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ]}
                            placeholder={
                              "\u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                            }
                            popupScopeClassName={sty["select__popup"]}
                            size={"large"}
                            value={p.generateStateValueProp($state, [
                              "select",
                              "value"
                            ])}
                          />

                          <SarvButton
                            data-plasmic-name={"sarvButton3"}
                            data-plasmic-override={overrides.sarvButton3}
                            className={classNames(
                              "__wab_instance",
                              sty.sarvButton3,
                              {
                                [sty.sarvButton3withdrawAddCard]: hasVariant(
                                  $state,
                                  "withdrawAddCard",
                                  "withdrawAddCard"
                                ),

                                [sty.sarvButton3withdraw]: hasVariant(
                                  $state,
                                  "withdraw",
                                  "withdraw"
                                )
                              }
                            )}
                            onClick={async event => {
                              const $steps = {};
                              $steps["updateDepositAddCard"] = true
                                ? (() => {
                                    const actionArgs = {
                                      vgroup: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariant",
                                          interactionUuid: "WRv29CMocPo-",
                                          componentUuid: "tFWqGnU-k6Ek",
                                          argName: "vgroup"
                                        },
                                        () => "withdrawAddCard"
                                      ),

                                      operation: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "updateVariant",
                                          interactionUuid: "WRv29CMocPo-",
                                          componentUuid: "tFWqGnU-k6Ek",
                                          argName: "operation"
                                        },
                                        () => 4
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariant",
                                        interactionUuid: "WRv29CMocPo-",
                                        componentUuid: "tFWqGnU-k6Ek"
                                      },
                                      () =>
                                        (({ vgroup, value }) => {
                                          if (typeof value === "string") {
                                            value = [value];
                                          }
                                          p.set($state, vgroup, true);
                                          return true;
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                              if (
                                typeof $steps["updateDepositAddCard"] ===
                                  "object" &&
                                typeof $steps["updateDepositAddCard"].then ===
                                  "function"
                              ) {
                                $steps["updateDepositAddCard"] =
                                  await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariant",
                                      interactionUuid: "WRv29CMocPo-",
                                      componentUuid: "tFWqGnU-k6Ek"
                                    },
                                    $steps["updateDepositAddCard"]
                                  );
                              }
                            }}
                            onSelectedChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "sarvButton3",
                                "selected"
                              ])(eventArgs[0]);
                            }}
                            selected={p.generateStateValueProp($state, [
                              "sarvButton3",
                              "selected"
                            ])}
                          >
                            {
                              "\u0627\u0641\u0632\u0648\u062f\u0646 \u06a9\u0627\u0631\u062a"
                            }
                          </SarvButton>
                        </p.Stack>
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input, {
                              [sty.inputwithdrawAddCard]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              ),

                              [sty.inputwithdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),

                            placeholder: hasVariant(
                              $state,
                              "withdrawAddCard",
                              "withdrawAddCard"
                            )
                              ? "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                              : "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                            size: "large",
                            value: p.generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                        <SarvButton
                          data-plasmic-name={"sarvButton4"}
                          data-plasmic-override={overrides.sarvButton4}
                          className={classNames(
                            "__wab_instance",
                            sty.sarvButton4,
                            {
                              [sty.sarvButton4withdrawAddCard]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              ),

                              [sty.sarvButton4withdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "sarvButton4",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "sarvButton4",
                            "selected"
                          ])}
                        >
                          {
                            "\u0628\u0631\u062f\u0627\u0634\u062a \u0627\u0632 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                          }
                        </SarvButton>
                        <SarvButton
                          data-plasmic-name={"sarvButton5"}
                          data-plasmic-override={overrides.sarvButton5}
                          className={classNames(
                            "__wab_instance",
                            sty.sarvButton5,
                            {
                              [sty.sarvButton5withdrawAddCard]: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              ),

                              [sty.sarvButton5withdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                          onSelectedChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "sarvButton5",
                              "selected"
                            ])(eventArgs[0]);
                          }}
                          selected={p.generateStateValueProp($state, [
                            "sarvButton5",
                            "selected"
                          ])}
                        >
                          {hasVariant(
                            $state,
                            "withdrawAddCard",
                            "withdrawAddCard"
                          )
                            ? "\u0627\u0641\u0632\u0648\u062f\u0646 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                            : "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"}
                        </SarvButton>
                      </section>
                      {(
                        hasVariant($state, "deposit", "deposit")
                          ? true
                          : hasVariant($state, "withdraw", "withdraw")
                          ? true
                          : false
                      ) ? (
                        <section
                          data-plasmic-name={"depositSec"}
                          data-plasmic-override={overrides.depositSec}
                          className={classNames(
                            projectcss.all,
                            sty.depositSec,
                            {
                              [sty.depositSecdeposit]: hasVariant(
                                $state,
                                "deposit",
                                "deposit"
                              ),

                              [sty.depositSecwithdraw]: hasVariant(
                                $state,
                                "withdraw",
                                "withdraw"
                              )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rwQci,
                              {
                                [sty.textdeposit__rwQciASns8]: hasVariant(
                                  $state,
                                  "deposit",
                                  "deposit"
                                )
                              }
                            )}
                          >
                            {
                              "\u0645\u0628\u0644\u063a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f"
                            }
                          </div>
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tFhGu,
                              {
                                [sty.freeBoxdeposit__tFhGuASns8]: hasVariant(
                                  $state,
                                  "deposit",
                                  "deposit"
                                )
                              }
                            )}
                          >
                            <SarvButton
                              data-plasmic-name={"sarvButton6"}
                              data-plasmic-override={overrides.sarvButton6}
                              className={classNames(
                                "__wab_instance",
                                sty.sarvButton6,
                                {
                                  [sty.sarvButton6deposit]: hasVariant(
                                    $state,
                                    "deposit",
                                    "deposit"
                                  )
                                }
                              )}
                              color={"softBlue"}
                              onClick={async event => {
                                const $steps = {};
                                $steps["updateInput2Value"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "Xc_UfWJUIcYO",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["input2", "value"]
                                          })
                                        ),

                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "Xc_UfWJUIcYO",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),

                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "Xc_UfWJUIcYO",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "value"
                                          },
                                          () => "10000000"
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "Xc_UfWJUIcYO",
                                          componentUuid: "tFWqGnU-k6Ek"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateInput2Value"] ===
                                    "object" &&
                                  typeof $steps["updateInput2Value"].then ===
                                    "function"
                                ) {
                                  $steps["updateInput2Value"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "Xc_UfWJUIcYO",
                                        componentUuid: "tFWqGnU-k6Ek"
                                      },
                                      $steps["updateInput2Value"]
                                    );
                                }
                              }}
                              onSelectedChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "sarvButton6",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              selected={p.generateStateValueProp($state, [
                                "sarvButton6",
                                "selected"
                              ])}
                            >
                              {
                                "\u06f1\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                              }
                            </SarvButton>
                            <SarvButton
                              data-plasmic-name={"sarvButton10"}
                              data-plasmic-override={overrides.sarvButton10}
                              className={classNames(
                                "__wab_instance",
                                sty.sarvButton10,
                                {
                                  [sty.sarvButton10deposit]: hasVariant(
                                    $state,
                                    "deposit",
                                    "deposit"
                                  )
                                }
                              )}
                              color={"softBlue"}
                              onClick={async event => {
                                const $steps = {};
                                $steps["updateInput2Value"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vq4hMNKGJwjS",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["input2", "value"]
                                          })
                                        ),

                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vq4hMNKGJwjS",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),

                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vq4hMNKGJwjS",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "value"
                                          },
                                          () => "25000000"
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "vq4hMNKGJwjS",
                                          componentUuid: "tFWqGnU-k6Ek"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateInput2Value"] ===
                                    "object" &&
                                  typeof $steps["updateInput2Value"].then ===
                                    "function"
                                ) {
                                  $steps["updateInput2Value"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "vq4hMNKGJwjS",
                                        componentUuid: "tFWqGnU-k6Ek"
                                      },
                                      $steps["updateInput2Value"]
                                    );
                                }
                              }}
                              onSelectedChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "sarvButton10",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              selected={p.generateStateValueProp($state, [
                                "sarvButton10",
                                "selected"
                              ])}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tpZdi
                                )}
                              >
                                {
                                  "\u06f2\u06f5\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                                }
                              </div>
                            </SarvButton>
                            <SarvButton
                              data-plasmic-name={"sarvButton11"}
                              data-plasmic-override={overrides.sarvButton11}
                              className={classNames(
                                "__wab_instance",
                                sty.sarvButton11,
                                {
                                  [sty.sarvButton11deposit]: hasVariant(
                                    $state,
                                    "deposit",
                                    "deposit"
                                  )
                                }
                              )}
                              color={"softBlue"}
                              onClick={async event => {
                                const $steps = {};
                                $steps["updateInput2Value"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "N_P9SA22KqPW",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["input2", "value"]
                                          })
                                        ),

                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "N_P9SA22KqPW",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),

                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "N_P9SA22KqPW",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "value"
                                          },
                                          () => "50000000"
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "N_P9SA22KqPW",
                                          componentUuid: "tFWqGnU-k6Ek"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateInput2Value"] ===
                                    "object" &&
                                  typeof $steps["updateInput2Value"].then ===
                                    "function"
                                ) {
                                  $steps["updateInput2Value"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "N_P9SA22KqPW",
                                        componentUuid: "tFWqGnU-k6Ek"
                                      },
                                      $steps["updateInput2Value"]
                                    );
                                }
                              }}
                              onSelectedChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "sarvButton11",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              selected={p.generateStateValueProp($state, [
                                "sarvButton11",
                                "selected"
                              ])}
                            >
                              {
                                "\u06f5\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                              }
                            </SarvButton>
                            <SarvButton
                              data-plasmic-name={"sarvButton7"}
                              data-plasmic-override={overrides.sarvButton7}
                              className={classNames(
                                "__wab_instance",
                                sty.sarvButton7,
                                {
                                  [sty.sarvButton7deposit]: hasVariant(
                                    $state,
                                    "deposit",
                                    "deposit"
                                  )
                                }
                              )}
                              color={"softBlue"}
                              onClick={async event => {
                                const $steps = {};
                                $steps["updateInput2Value"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "3Z47bP-Mtd7Y",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["input2", "value"]
                                          })
                                        ),

                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "3Z47bP-Mtd7Y",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),

                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "3Z47bP-Mtd7Y",
                                            componentUuid: "tFWqGnU-k6Ek",
                                            argName: "value"
                                          },
                                          () => "100000000"
                                        )
                                      };
                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "3Z47bP-Mtd7Y",
                                          componentUuid: "tFWqGnU-k6Ek"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["updateInput2Value"] ===
                                    "object" &&
                                  typeof $steps["updateInput2Value"].then ===
                                    "function"
                                ) {
                                  $steps["updateInput2Value"] =
                                    await __wrapUserPromise(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "updateVariable",
                                        interactionUuid: "3Z47bP-Mtd7Y",
                                        componentUuid: "tFWqGnU-k6Ek"
                                      },
                                      $steps["updateInput2Value"]
                                    );
                                }
                              }}
                              onSelectedChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "sarvButton7",
                                  "selected"
                                ])(eventArgs[0]);
                              }}
                              selected={p.generateStateValueProp($state, [
                                "sarvButton7",
                                "selected"
                              ])}
                            >
                              {
                                "\u06f1\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0\u06f0 \u062a\u0648\u0645\u0627\u0646"
                              }
                            </SarvButton>
                          </p.Stack>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input2,
                                {
                                  [sty.input2deposit]: hasVariant(
                                    $state,
                                    "deposit",
                                    "deposit"
                                  ),

                                  [sty.input2withdrawAddCard]: hasVariant(
                                    $state,
                                    "withdrawAddCard",
                                    "withdrawAddCard"
                                  ),

                                  [sty.input2withdraw]: hasVariant(
                                    $state,
                                    "withdraw",
                                    "withdraw"
                                  )
                                }
                              ),

                              onChange:
                                p.generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input2", "value"],
                                  AntdInput_Helpers
                                ),

                              placeholder: hasVariant(
                                $state,
                                "withdrawAddCard",
                                "withdrawAddCard"
                              )
                                ? "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                                : "\u0645\u0628\u0644\u063a \u062f\u0644\u062e\u0648\u0627\u0647 \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                              size: "large",
                              value: p.generateStateValueProp($state, [
                                "input2",
                                "value"
                              ])
                            };
                            p.initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input2.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input2"}
                                data-plasmic-override={overrides.input2}
                                {...child$Props}
                              />
                            );
                          })()}
                          <SarvButton
                            data-plasmic-name={"sarvButton8"}
                            data-plasmic-override={overrides.sarvButton8}
                            className={classNames(
                              "__wab_instance",
                              sty.sarvButton8,
                              {
                                [sty.sarvButton8deposit]: hasVariant(
                                  $state,
                                  "deposit",
                                  "deposit"
                                )
                              }
                            )}
                            onSelectedChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "sarvButton8",
                                "selected"
                              ])(eventArgs[0]);
                            }}
                            selected={p.generateStateValueProp($state, [
                              "sarvButton8",
                              "selected"
                            ])}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dWyL1
                              )}
                            >
                              {
                                "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
                              }
                            </div>
                          </SarvButton>
                        </section>
                      ) : null}
                    </section>
                  </p.Stack>
                </section>
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footerwithdraw]: hasVariant(
                      $state,
                      "withdraw",
                      "withdraw"
                    )
                  })}
                />
              </React.Fragment>
            )}
          </Fetcher>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "dataFetcher",
    "section",
    "header",
    "profile",
    "avatar",
    "sarvButton",
    "sarvButton2",
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "history",
    "table",
    "withdrawSec",
    "select",
    "sarvButton3",
    "input",
    "sarvButton4",
    "sarvButton5",
    "depositSec",
    "sarvButton6",
    "sarvButton10",
    "sarvButton11",
    "sarvButton7",
    "input2",
    "sarvButton8",
    "footer"
  ],

  dataFetcher: [
    "dataFetcher",
    "section",
    "header",
    "profile",
    "avatar",
    "sarvButton",
    "sarvButton2",
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "history",
    "table",
    "withdrawSec",
    "select",
    "sarvButton3",
    "input",
    "sarvButton4",
    "sarvButton5",
    "depositSec",
    "sarvButton6",
    "sarvButton10",
    "sarvButton11",
    "sarvButton7",
    "input2",
    "sarvButton8",
    "footer"
  ],

  section: [
    "section",
    "header",
    "profile",
    "avatar",
    "sarvButton",
    "sarvButton2",
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "history",
    "table",
    "withdrawSec",
    "select",
    "sarvButton3",
    "input",
    "sarvButton4",
    "sarvButton5",
    "depositSec",
    "sarvButton6",
    "sarvButton10",
    "sarvButton11",
    "sarvButton7",
    "input2",
    "sarvButton8"
  ],

  header: ["header"],
  profile: ["profile", "avatar", "sarvButton", "sarvButton2"],
  avatar: ["avatar"],
  sarvButton: ["sarvButton"],
  sarvButton2: ["sarvButton2"],
  walletSide: [
    "walletSide",
    "transactionHistory",
    "deposit3",
    "withdrawal",
    "history",
    "table",
    "withdrawSec",
    "select",
    "sarvButton3",
    "input",
    "sarvButton4",
    "sarvButton5",
    "depositSec",
    "sarvButton6",
    "sarvButton10",
    "sarvButton11",
    "sarvButton7",
    "input2",
    "sarvButton8"
  ],

  transactionHistory: ["transactionHistory"],
  deposit3: ["deposit3"],
  withdrawal: ["withdrawal"],
  history: ["history", "table"],
  table: ["table"],
  withdrawSec: [
    "withdrawSec",
    "select",
    "sarvButton3",
    "input",
    "sarvButton4",
    "sarvButton5"
  ],

  select: ["select"],
  sarvButton3: ["sarvButton3"],
  input: ["input"],
  sarvButton4: ["sarvButton4"],
  sarvButton5: ["sarvButton5"],
  depositSec: [
    "depositSec",
    "sarvButton6",
    "sarvButton10",
    "sarvButton11",
    "sarvButton7",
    "input2",
    "sarvButton8"
  ],

  sarvButton6: ["sarvButton6"],
  sarvButton10: ["sarvButton10"],
  sarvButton11: ["sarvButton11"],
  sarvButton7: ["sarvButton7"],
  input2: ["input2"],
  sarvButton8: ["sarvButton8"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWallet__ArgProps,
          internalVariantPropNames: PlasmicWallet__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWallet";
  } else {
    func.displayName = `PlasmicWallet.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"aUZyoBv2znBVirsF7auAUJ"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "aUZyoBv2znBVirsF7auAUJ"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicWallet = Object.assign(
  // Top-level PlasmicWallet renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    dataFetcher: makeNodeComponent("dataFetcher"),
    section: makeNodeComponent("section"),
    header: makeNodeComponent("header"),
    profile: makeNodeComponent("profile"),
    avatar: makeNodeComponent("avatar"),
    sarvButton: makeNodeComponent("sarvButton"),
    sarvButton2: makeNodeComponent("sarvButton2"),
    walletSide: makeNodeComponent("walletSide"),
    transactionHistory: makeNodeComponent("transactionHistory"),
    deposit3: makeNodeComponent("deposit3"),
    withdrawal: makeNodeComponent("withdrawal"),
    history: makeNodeComponent("history"),
    table: makeNodeComponent("table"),
    withdrawSec: makeNodeComponent("withdrawSec"),
    select: makeNodeComponent("select"),
    sarvButton3: makeNodeComponent("sarvButton3"),
    input: makeNodeComponent("input"),
    sarvButton4: makeNodeComponent("sarvButton4"),
    sarvButton5: makeNodeComponent("sarvButton5"),
    depositSec: makeNodeComponent("depositSec"),
    sarvButton6: makeNodeComponent("sarvButton6"),
    sarvButton10: makeNodeComponent("sarvButton10"),
    sarvButton11: makeNodeComponent("sarvButton11"),
    sarvButton7: makeNodeComponent("sarvButton7"),
    input2: makeNodeComponent("input2"),
    sarvButton8: makeNodeComponent("sarvButton8"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicWallet
    internalVariantProps: PlasmicWallet__VariantProps,
    internalArgProps: PlasmicWallet__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWallet;
/* prettier-ignore-end */
