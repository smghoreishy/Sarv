// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: wfbSoySNQG-a
import * as React from "react";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { LoadingBoundary } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: u-J0rH0B-4/codeComponent
import LoadingComponent from "../../LoadingComponent"; // plasmic-import: HDv_HWbccKet/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput"; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicProjectPageRightSide.module.css"; // plasmic-import: wfbSoySNQG-a/css

createPlasmicElementProxy;

export const PlasmicProjectPageRightSide__VariantProps = new Array();

export const PlasmicProjectPageRightSide__ArgProps = new Array(
  "title",
  "onTitleChange",
  "investmnetType",
  "onInvestmnetTypeChange",
  "locationName",
  "onLocationNameChange",
  "builder",
  "onBuilderChange",
  "startDuration",
  "onStartDurationChange",
  "endDuration",
  "onEndDurationChange",
  "profitPercent",
  "onProfitPercentChange",
  "minMoney",
  "onMinMoneyChange",
  "numberOfFloor",
  "onNumberOfFloorChange",
  "totalFloor",
  "onTotalFloorChange",
  "usefulArea",
  "onUsefulAreaChange",
  "remainArea",
  "onRemainAreaChange",
  "basePrice",
  "onBasePriceChange",
  "id",
  "onIdChange",
  "onIsLoadingRightChange"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProjectPageRightSide__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "title",
        type: "writable",
        variableType: "text",
        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "investmnetType",
        type: "writable",
        variableType: "text",
        valueProp: "investmnetType",
        onChangeProp: "onInvestmnetTypeChange"
      },
      {
        path: "locationName",
        type: "writable",
        variableType: "text",
        valueProp: "locationName",
        onChangeProp: "onLocationNameChange"
      },
      {
        path: "builder",
        type: "writable",
        variableType: "text",
        valueProp: "builder",
        onChangeProp: "onBuilderChange"
      },
      {
        path: "startDuration",
        type: "writable",
        variableType: "text",
        valueProp: "startDuration",
        onChangeProp: "onStartDurationChange"
      },
      {
        path: "endDuration",
        type: "writable",
        variableType: "text",
        valueProp: "endDuration",
        onChangeProp: "onEndDurationChange"
      },
      {
        path: "profitPercent",
        type: "writable",
        variableType: "text",
        valueProp: "profitPercent",
        onChangeProp: "onProfitPercentChange"
      },
      {
        path: "minMoney",
        type: "writable",
        variableType: "number",
        valueProp: "minMoney",
        onChangeProp: "onMinMoneyChange"
      },
      {
        path: "numberOfFloor",
        type: "writable",
        variableType: "number",
        valueProp: "numberOfFloor",
        onChangeProp: "onNumberOfFloorChange"
      },
      {
        path: "totalFloor",
        type: "writable",
        variableType: "number",
        valueProp: "totalFloor",
        onChangeProp: "onTotalFloorChange"
      },
      {
        path: "usefulArea",
        type: "writable",
        variableType: "number",
        valueProp: "usefulArea",
        onChangeProp: "onUsefulAreaChange"
      },
      {
        path: "remainArea",
        type: "writable",
        variableType: "number",
        valueProp: "remainArea",
        onChangeProp: "onRemainAreaChange"
      },
      {
        path: "basePrice",
        type: "writable",
        variableType: "number",
        valueProp: "basePrice",
        onChangeProp: "onBasePriceChange"
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "id",
        type: "writable",
        variableType: "number",
        valueProp: "id",
        onChangeProp: "onIdChange"
      },
      {
        path: "isLoadingRight",
        type: "readonly",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.fetchyId.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        onChangeProp: "onIsLoadingRightChange"
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    fetchyId: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "52db0ef7-9abf-443e-9244-d13f8ca1e612",
            userArgs: {
              filters: [$state.id]
            },
            cacheKey: "plasmic.$.kLBUdF6BC0Iz.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_landing_page_starter_css.plasmic_tokens,
        sty.root
      )}
    >
      <LoadingBoundary
        data-plasmic-name={"loadingBoundary"}
        data-plasmic-override={overrides.loadingBoundary}
        className={classNames("__wab_instance", sty.loadingBoundary)}
        loadingState={
          <ph.DataCtxReader>
            {$ctx => (
              <LoadingComponent
                data-plasmic-name={"loadingComponent"}
                data-plasmic-override={overrides.loadingComponent}
                className={classNames("__wab_instance", sty.loadingComponent)}
              />
            )}
          </ph.DataCtxReader>
        }
      >
        <ph.DataCtxReader>
          {$ctx => (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__spcGa)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__riUmx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hDasQ
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.fetchyId.data[0].title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s5E4T
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.fetchyId.data[0].type;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nEequ
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.fetchyId.data[0]["location-name"];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pEJtd
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return "سازنده: " + $queries.fetchyId.data[0].builder;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__broLa)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eTjcO)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__j8Jbm
                    )}
                  >
                    {
                      "\u067e\u06cc\u0634\u0631\u0641\u062a \u067e\u0631\u0648\u0698\u0647"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vDn2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__elRzR
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["month pass"];
                              return (
                                toPersisanNumber(englishNumber) +
                                " ماه از شروع "
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s1WOo
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["duration to end"];
                              return (
                                toPersisanNumber(englishNumber) +
                                " ماه تا پایان "
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kj6R)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qbgG
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let __plasmic_ret = undefined;
                              let start = Number(
                                $queries.fetchyId.data[0]["month pass"]
                              );

                              let toEnd = Number(
                                $queries.fetchyId.data[0]["duration to end"]
                              );

                              let nowPercent = (a, b) => {
                                return (a / (a + b)) * 57;
                              };
                              let i = nowPercent(start, toEnd);
                              let text = "";
                              for (let j = 0; j <= i; j++) {
                                __plasmic_ret = text += "-";
                              }
                              return __plasmic_ret;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "       ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zqWil)}
                >
                  <div
                    data-plasmic-name={
                      "\u062a\u0639\u062f\u0627\u062f\u0637\u0628\u0642\u0647"
                    }
                    data-plasmic-override={overrides.تعدادطبقه}
                    className={classNames(projectcss.all, sty.تعدادطبقه)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v0Gdz
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "تعداد طبقه";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hvRvh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0].floor;
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u062a\u0639\u062f\u0627\u062f\u0648\u0627\u062d\u062f"
                    }
                    data-plasmic-override={overrides.تعدادواحد}
                    className={classNames(projectcss.all, sty.تعدادواحد)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qCYt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "تعداد واحد";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sqD2U
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0].units;
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u0645\u062a\u0631\u0627\u0645\u0641\u062f"
                    }
                    data-plasmic-override={overrides.مترامفد}
                    className={classNames(projectcss.all, sty.مترامفد)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tW4B
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "متراژ مفید ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iSDo
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["total meter"];
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u0645\u062a\u0631\u0627\u0628\u0627\u0642\u0645\u0627\u0646\u062f\u0647"
                    }
                    data-plasmic-override={overrides.متراباقمانده}
                    className={classNames(projectcss.all, sty.متراباقمانده)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a0F8
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "متراژ باقی مانده ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aruZf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["remained meter"];
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u0642\u0645\u062a\u0645\u0628\u0646\u0627"
                    }
                    data-plasmic-override={overrides.قمتمبنا}
                    className={classNames(projectcss.all, sty.قمتمبنا)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hcPWf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "قیمت مبنا ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eKji
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["based meter price"];
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u0633\u0648\u062f\u0645\u062d\u0642\u0642\u0634\u062f\u0647"
                    }
                    data-plasmic-override={overrides.سودمحققشده}
                    className={classNames(projectcss.all, sty.سودمحققشده)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7MIj7
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "سود محقق شده ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0648\u062f \u062a\u0627 \u0627\u0645\u0631\u0648\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Yqs7
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              let toPersisanNumber = n => {
                                const farsiDigits = [
                                  "۰",
                                  "۱",
                                  "۲",
                                  "۳",
                                  "۴",
                                  "۵",
                                  "۶",
                                  "۷",
                                  "۸",
                                  "۹"
                                ];

                                return n
                                  .toString()
                                  .replace(/\d/g, x => farsiDigits[x]);
                              };
                              let englishNumber =
                                $queries.fetchyId.data[0]["profit till now"];
                              return toPersisanNumber(englishNumber);
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </p.Stack>
                <div className={classNames(projectcss.all, sty.freeBox__mrfKi)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dmSpE
                    )}
                  >
                    {
                      "\u0634\u0631\u0648\u0639 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u0627\u0632"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2VZpr
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            let toPersisanNumber = n => {
                              const farsiDigits = [
                                "۰",
                                "۱",
                                "۲",
                                "۳",
                                "۴",
                                "۵",
                                "۶",
                                "۷",
                                "۸",
                                "۹"
                              ];

                              return n
                                .toString()
                                .replace(/\d/g, x => farsiDigits[x]);
                            };
                            let englishNumber =
                              $queries.fetchyId.data[0]["starting price"];
                            return toPersisanNumber(englishNumber);
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input),
                    onChange: p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input", "value"],
                      AntdInput_Helpers
                    ),

                    placeholder:
                      "\u0645\u06cc\u0632\u0627\u0646 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc",
                    suffix: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tTcm7
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#706E6E" }}
                          >
                            {"\u062a\u0648\u0645\u0627\u0646"}
                          </span>
                        </React.Fragment>
                      </div>
                    ),

                    type: "number",
                    value: p.generateStateValueProp($state, ["input", "value"])
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input.value"
                      }
                    ],

                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"input"}
                      data-plasmic-override={overrides.input}
                      {...child$Props}
                    />
                  );
                })()}
                <SarvButton
                  data-plasmic-name={"sarvButton"}
                  data-plasmic-override={overrides.sarvButton}
                  className={classNames("__wab_instance", sty.sarvButton)}
                  color={"softPersianGreen"}
                  onSelectedChange={(...eventArgs) => {
                    p.generateStateOnChangeProp($state, [
                      "sarvButton",
                      "selected"
                    ])(eventArgs[0]);
                  }}
                  selected={p.generateStateValueProp($state, [
                    "sarvButton",
                    "selected"
                  ])}
                >
                  {
                    "\u0634\u0631\u0648\u0639 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc"
                  }
                </SarvButton>
              </p.Stack>
            </p.Stack>
          )}
        </ph.DataCtxReader>
      </LoadingBoundary>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "loadingBoundary",
    "loadingComponent",
    "\u062a\u0639\u062f\u0627\u062f\u0637\u0628\u0642\u0647",
    "\u062a\u0639\u062f\u0627\u062f\u0648\u0627\u062d\u062f",
    "\u0645\u062a\u0631\u0627\u0645\u0641\u062f",
    "\u0645\u062a\u0631\u0627\u0628\u0627\u0642\u0645\u0627\u0646\u062f\u0647",
    "\u0642\u0645\u062a\u0645\u0628\u0646\u0627",
    "\u0633\u0648\u062f\u0645\u062d\u0642\u0642\u0634\u062f\u0647",
    "input",
    "sarvButton"
  ],

  loadingBoundary: [
    "loadingBoundary",
    "loadingComponent",
    "\u062a\u0639\u062f\u0627\u062f\u0637\u0628\u0642\u0647",
    "\u062a\u0639\u062f\u0627\u062f\u0648\u0627\u062d\u062f",
    "\u0645\u062a\u0631\u0627\u0645\u0641\u062f",
    "\u0645\u062a\u0631\u0627\u0628\u0627\u0642\u0645\u0627\u0646\u062f\u0647",
    "\u0642\u0645\u062a\u0645\u0628\u0646\u0627",
    "\u0633\u0648\u062f\u0645\u062d\u0642\u0642\u0634\u062f\u0647",
    "input",
    "sarvButton"
  ],

  loadingComponent: ["loadingComponent"],
  تعدادطبقه: ["\u062a\u0639\u062f\u0627\u062f\u0637\u0628\u0642\u0647"],
  تعدادواحد: ["\u062a\u0639\u062f\u0627\u062f\u0648\u0627\u062d\u062f"],
  مترامفد: ["\u0645\u062a\u0631\u0627\u0645\u0641\u062f"],
  متراباقمانده: [
    "\u0645\u062a\u0631\u0627\u0628\u0627\u0642\u0645\u0627\u0646\u062f\u0647"
  ],

  قمتمبنا: ["\u0642\u0645\u062a\u0645\u0628\u0646\u0627"],
  سودمحققشده: ["\u0633\u0648\u062f\u0645\u062d\u0642\u0642\u0634\u062f\u0647"],
  input: ["input"],
  sarvButton: ["sarvButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProjectPageRightSide__ArgProps,
          internalVariantPropNames: PlasmicProjectPageRightSide__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProjectPageRightSide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProjectPageRightSide";
  } else {
    func.displayName = `PlasmicProjectPageRightSide.${nodeName}`;
  }
  return func;
}

export const PlasmicProjectPageRightSide = Object.assign(
  // Top-level PlasmicProjectPageRightSide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingBoundary: makeNodeComponent("loadingBoundary"),
    loadingComponent: makeNodeComponent("loadingComponent"),
    تعدادطبقه: makeNodeComponent(
      "\u062a\u0639\u062f\u0627\u062f\u0637\u0628\u0642\u0647"
    ),

    تعدادواحد: makeNodeComponent(
      "\u062a\u0639\u062f\u0627\u062f\u0648\u0627\u062d\u062f"
    ),

    مترامفد: makeNodeComponent("\u0645\u062a\u0631\u0627\u0645\u0641\u062f"),
    متراباقمانده: makeNodeComponent(
      "\u0645\u062a\u0631\u0627\u0628\u0627\u0642\u0645\u0627\u0646\u062f\u0647"
    ),

    قمتمبنا: makeNodeComponent("\u0642\u0645\u062a\u0645\u0628\u0646\u0627"),
    سودمحققشده: makeNodeComponent(
      "\u0633\u0648\u062f\u0645\u062d\u0642\u0642\u0634\u062f\u0647"
    ),

    input: makeNodeComponent("input"),
    sarvButton: makeNodeComponent("sarvButton"),
    // Metadata about props expected for PlasmicProjectPageRightSide
    internalVariantProps: PlasmicProjectPageRightSide__VariantProps,
    internalArgProps: PlasmicProjectPageRightSide__ArgProps
  }
);

export default PlasmicProjectPageRightSide;
/* prettier-ignore-end */
