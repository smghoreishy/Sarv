// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aUZyoBv2znBVirsF7auAUJ
// Component: OzU25nU7F5
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: hdkwfO6DN97t/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: 7UkPT0uRfk9/codeComponent
import ProjectCard from "../../ProjectCard"; // plasmic-import: z8gKJTdyaC-H/component
import SarvButton from "../../SarvButton"; // plasmic-import: oskxfFF4bAz/component
import Footer from "../../Footer"; // plasmic-import: wozDst_MhUug/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_landing_page_starter_css from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qLp2o69PMLTDkVR2ydizGB/projectcss
import projectcss from "./plasmic_sarv.module.css"; // plasmic-import: aUZyoBv2znBVirsF7auAUJ/projectcss
import sty from "./PlasmicHomePage.module.css"; // plasmic-import: OzU25nU7F5/css

createPlasmicElementProxy;

export const PlasmicHomePage__VariantProps = new Array();

export const PlasmicHomePage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "projectCard[].thumbnail",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].investmnetType",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].locationName",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].builder",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].startDuration",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].endDuration",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].profitPercent",
        type: "private",
        variableType: "text"
      },
      {
        path: "projectCard[].minMoney",
        type: "private",
        variableType: "number"
      },
      {
        path: "sarvButton.selected",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "projectCard[].projectId",
        type: "private",
        variableType: "text"
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    componentData: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "g2uxxaev1HFNY4HHP1PTDS",
            opId: "36228745-bd76-47cd-800a-5a079de518a7",
            userArgs: {},
            cacheKey: "plasmic.$.fqIitcRQ-Hhn.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_landing_page_starter_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"sectionOne"}
            data-plasmic-override={overrides.sectionOne}
            className={classNames(projectcss.all, sty.sectionOne)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div
              data-plasmic-name={"pageOne"}
              data-plasmic-override={overrides.pageOne}
              className={classNames(projectcss.all, sty.pageOne)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___7VgOa)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x6Vf2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__id6VT
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0628\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u067e\u0631\u0648\u0698\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u062e\u062a\u0645\u0627\u0646\u06cc "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#00A693" }}
                      >
                        {
                          "\u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u062f\u0644\u0627\u0631 \u0633\u0648\u062f"
                        }
                      </span>
                      <React.Fragment>
                        {" \u06a9\u0646\u06cc\u062f."}
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___96UsC
                    )}
                  >
                    {
                      "\u0645\u0627\u0646\u0639\u06cc \u0628\u0631\u0627\u06cc \u0633\u0631\u0645\u0627\u06cc\u0647\u200c\u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u0645\u0633\u06a9\u0646 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f\u061b \u0628\u0627 \u0647\u0631 \u0645\u0642\u062f\u0627\u0631 \u0633\u0631\u0645\u0627\u06cc\u0647 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f \u0648 \u0642\u062f\u0645 \u0628\u0647 \u0642\u062f\u0645 \u062f\u0627\u0631\u0627\u06cc\u06cc \u062e\u0648\u062f \u0631\u0627 \u0628\u06cc\u0634\u062a\u0631 \u06a9\u0646\u06cc\u062f..."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6Hpds)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gkeBv
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0628\u0631\u0627\u06cc \u062f\u06cc\u062f\u0646 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627 "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#00A693" }}
                        >
                          {"\u06a9\u0644\u06cc\u06a9"}
                        </span>
                        <React.Fragment>
                          {" \u06a9\u0646\u06cc\u062f"}
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                </p.Stack>
                <section
                  data-plasmic-name={"imgPageOne"}
                  data-plasmic-override={overrides.imgPageOne}
                  className={classNames(projectcss.all, sty.imgPageOne)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__llksc)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/sarv/images/pexelsJovydasPinkevicius24620Jpg.jpg",
                      fullWidth: 1280,
                      fullHeight: 1920,
                      aspectRatio: undefined
                    }}
                  />
                </section>
              </div>
            </div>
          </section>
          <section
            data-plasmic-name={"sectionTwo"}
            data-plasmic-override={overrides.sectionTwo}
            className={classNames(projectcss.all, sty.sectionTwo)}
          >
            <section className={classNames(projectcss.all, sty.section__c1JTr)}>
              <div className={classNames(projectcss.all, sty.freeBox___5A2I)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ptmHa
                  )}
                >
                  {
                    "\u0686\u0631\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u0633\u0627\u062e\u062a\u0645\u0627\u0646\u06cc\u061f"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__n3D4B)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cIbJf
                    )}
                  >
                    {
                      "\u0627\u06af\u0631 \u0633\u0627\u0644 \u06f1\u06f3\u06f8\u06f0\u060c \u0645\u0639\u0627\u062f\u0644"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q8EBz
                    )}
                  >
                    {"\u06cc\u06a9"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lz7Qd
                    )}
                  >
                    {
                      "\u0645\u062a\u0631 \u0622\u067e\u0627\u0631\u062a\u0645\u0627\u0646 \u062f\u0631 \u062d\u0648\u0632\u0647\u200c\u0647\u0627\u06cc \u0645\u062e\u062a\u0644\u0641 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u06a9\u0631\u062f\u0647 \u0628\u0648\u062f\u06cc\u062f \u0627\u0645\u0631\u0648\u0632 \u0686\u0642\u062f\u0631 \u067e\u0648\u0644 \u062f\u0627\u0634\u062a\u06cc\u062f\u061f"
                    }
                  </div>
                </div>
              </div>
            </section>
            <section className={classNames(projectcss.all, sty.section__lUq2Y)}>
              <div className={classNames(projectcss.all, sty.freeBox___6AmPa)}>
                <section
                  className={classNames(projectcss.all, sty.section__o7Hn3)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qWigr)}
                    displayHeight={"95%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"75%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/sarv/images/pexelsRobinSchreiner2261166Jpg.jpg",
                      fullWidth: 1280,
                      fullHeight: 1706,
                      aspectRatio: undefined
                    }}
                  />
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__d4Cn)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___31Gk2
                    )}
                  >
                    {
                      "\u062a\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc \u06a9\u0627\u0631..."
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__l1Eme)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section__weJ45)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__agabw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "\u0645\u062a\u0631\u0627\u0698 \u067e\u0631\u0648\u0698\u0647"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#00A693" }}
                          >
                            {
                              "\u06f1\u06f3 \u0647\u0632\u0627\u0631 \u0645\u062a\u0631"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </section>
                    <section
                      className={classNames(
                        projectcss.all,
                        sty.section___9NsO2
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uiwL4
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#00A693" }}
                          >
                            {
                              "\u06f1\u06f2\u06f0\u06f2 \u0645\u0639\u0627\u0645\u0644\u0647"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </section>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Srbj)}
                  >
                    <section
                      className={classNames(projectcss.all, sty.section___88ZM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e6ONq
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062a\u0627 \u0628\u0647 \u0627\u0645\u0631\u0648\u0632"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#00A693" }}
                          >
                            {
                              "\u06f2\u06f6\u06f7 \u0645\u06cc\u0644\u06cc\u0627\u0631\u062f \u062a\u0648\u0645\u0627\u0646"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                    </section>
                    <section
                      className={classNames(projectcss.all, sty.section__ysZ74)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__atBh
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FFFFFF" }}
                          >
                            {
                              "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#00A693" }}
                          >
                            {"\u06f7\u06f3\u06f5 \u0646\u0641\u0631"}
                          </span>
                        </React.Fragment>
                      </div>
                    </section>
                  </div>
                </section>
              </div>
            </section>
          </section>
          <section
            data-plasmic-name={"sectionTwo3"}
            data-plasmic-override={overrides.sectionTwo3}
            className={classNames(projectcss.all, sty.sectionTwo3)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___1Vio1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__at3Ui
                )}
              >
                {
                  "\u062a\u0627 \u0627\u06cc\u0646\u062c\u0627\u06cc \u06a9\u0627\u0631 ..."
                }
              </div>
            </div>
            <section className={classNames(projectcss.all, sty.section__uh3Cz)}>
              <section
                className={classNames(projectcss.all, sty.section___8Uapw)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__oxmPj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gNJe
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062a\u0627 \u0628\u0647 \u0627\u0645\u0631\u0648\u0632\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#1A3040" }}
                      >
                        {
                          "\u06f2\u06f6\u06f7 \u0645\u06cc\u0644\u06cc\u0627\u0631\u062f \u062a\u0648\u0645\u0627\u0646"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rrN5D
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#1A3040" }}
                      >
                        {"\u06f7\u06f3\u06f5 \u0646\u0641\u0631"}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x2Zks
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0645\u062a\u0631\u0627\u0698 \u067e\u0631\u0648\u0698\u0647\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#1A3040" }}
                      >
                        {
                          "\u06f1\u06f3 \u0647\u0632\u0627\u0631 \u0645\u062a\u0631"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pOgIw
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647\n"
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#1A3040" }}
                      >
                        {
                          "\u06f1\u06f2\u06f0\u06f2 \u0645\u0639\u0627\u0645\u0644\u0647"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </div>
              </section>
            </section>
          </section>
          <section
            data-plasmic-name={"sectionThree"}
            data-plasmic-override={overrides.sectionThree}
            className={classNames(projectcss.all, sty.sectionThree)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__kNnci)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mphch
                )}
              >
                {
                  "\u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u062f\u0631 \u062d\u0627\u0644 \u0633\u0631\u0645\u0627\u06cc\u0647 \u067e\u0630\u06cc\u0631\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___62LXd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bRf95
                  )}
                >
                  {
                    "\u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                  }
                </div>
              </div>
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xZgVm)}
            >
              {(
                (() => {
                  try {
                    return $queries.componentData.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })() ?? []
              ).map((currentItem, currentIndex) => (
                <Fetcher
                  data-plasmic-name={"dataFetcher"}
                  data-plasmic-override={overrides.dataFetcher}
                  className={classNames("__wab_instance", sty.dataFetcher)}
                  dataOp={{
                    sourceId: "g2uxxaev1HFNY4HHP1PTDS",
                    opId: "36228745-bd76-47cd-800a-5a079de518a7",
                    userArgs: {},
                    cacheKey: "plasmic.$.pxtGq5ErvnKD.$.",
                    invalidatedKeys: null,
                    roleId: null
                  }}
                  key={currentIndex}
                  queries={$queries}
                >
                  {$queries =>
                    (() => {
                      const child$Props = {
                        builder: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "builder"
                        ]),

                        className: classNames(
                          "__wab_instance",
                          sty.projectCard
                        ),

                        endDuration: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "endDuration"
                        ]),

                        investmnetType: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "investmnetType"
                        ]),

                        locationName: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "locationName"
                        ]),

                        minMoney: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "minMoney"
                        ]),

                        onBuilderChange: p.generateStateOnChangeProp($state, [
                          "projectCard",
                          currentIndex,
                          "builder"
                        ]),

                        onEndDurationChange: p.generateStateOnChangeProp(
                          $state,
                          ["projectCard", currentIndex, "endDuration"]
                        ),

                        onInvestmnetTypeChange: p.generateStateOnChangeProp(
                          $state,
                          ["projectCard", currentIndex, "investmnetType"]
                        ),

                        onLocationNameChange: p.generateStateOnChangeProp(
                          $state,
                          ["projectCard", currentIndex, "locationName"]
                        ),

                        onMinMoneyChange: p.generateStateOnChangeProp($state, [
                          "projectCard",
                          currentIndex,
                          "minMoney"
                        ]),

                        onProfitPercentChange: p.generateStateOnChangeProp(
                          $state,
                          ["projectCard", currentIndex, "profitPercent"]
                        ),

                        onProjectIdChange: p.generateStateOnChangeProp($state, [
                          "projectCard",
                          currentIndex,
                          "projectId"
                        ]),

                        onStartDurationChange: p.generateStateOnChangeProp(
                          $state,
                          ["projectCard", currentIndex, "startDuration"]
                        ),

                        onThumbnailChange: p.generateStateOnChangeProp($state, [
                          "projectCard",
                          currentIndex,
                          "thumbnail"
                        ]),

                        onTitleChange: p.generateStateOnChangeProp($state, [
                          "projectCard",
                          currentIndex,
                          "title"
                        ]),

                        profitPercent: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "profitPercent"
                        ]),

                        projectId: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "projectId"
                        ]),

                        startDuration: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "startDuration"
                        ]),

                        thumbnail: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "thumbnail"
                        ]),

                        title: p.generateStateValueProp($state, [
                          "projectCard",
                          currentIndex,
                          "title"
                        ])
                      };
                      p.initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "projectCard[].thumbnail",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.img1;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].title",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].investmnetType",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.status;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].locationName",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem["location-name"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].builder",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.builder;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].startDuration",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem["month pass"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].endDuration",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem["duration to end"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].profitPercent",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem["profit till now"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].minMoney",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem["starting price"];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "projectCard[].projectId",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],

                        [currentIndex]
                      );

                      return (
                        <ProjectCard
                          data-plasmic-name={"projectCard"}
                          data-plasmic-override={overrides.projectCard}
                          {...child$Props}
                        />
                      );
                    })()
                  }
                </Fetcher>
              ))}
            </p.Stack>
          </section>
          <section
            data-plasmic-name={"sectionFour"}
            data-plasmic-override={overrides.sectionFour}
            className={classNames(projectcss.all, sty.sectionFour)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3SpNm
              )}
            >
              {
                "\u0647\u0645\u06cc\u0646 \u062d\u0627\u0644\u0627 \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yg6Wi
              )}
            >
              {
                "\u0628\u0627 \u0633\u0627\u062e\u062a\u0646 \u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0628\u0647 \u0633\u0631\u0639\u062a \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062e\u0648\u062f \u0631\u0627 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u062f"
              }
            </div>
            <SarvButton
              data-plasmic-name={"sarvButton"}
              data-plasmic-override={overrides.sarvButton}
              className={classNames("__wab_instance", sty.sarvButton)}
              color={"softPersianGreen"}
              onClick={async event => {
                const $steps = {};
                $steps["updateProjectCardThumbnail"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "XgsXDHr5tt0a",
                            componentUuid: "OzU25nU7F5",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["projectCard[]", "thumbnail"]
                          })
                        ),

                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "XgsXDHr5tt0a",
                            componentUuid: "OzU25nU7F5",
                            argName: "operation"
                          },
                          () => 0
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "XgsXDHr5tt0a",
                          componentUuid: "OzU25nU7F5"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateProjectCardThumbnail"] === "object" &&
                  typeof $steps["updateProjectCardThumbnail"].then ===
                    "function"
                ) {
                  $steps["updateProjectCardThumbnail"] =
                    await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "XgsXDHr5tt0a",
                        componentUuid: "OzU25nU7F5"
                      },
                      $steps["updateProjectCardThumbnail"]
                    );
                }
              }}
              onSelectedChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["sarvButton", "selected"])(
                  eventArgs[0]
                );
              }}
              selected={p.generateStateValueProp($state, [
                "sarvButton",
                "selected"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dm5Oz
                )}
              >
                {
                  "\u0648\u0631\u0648\u062f | \u062b\u0628\u062a \u0646\u0627\u0645"
                }
              </div>
            </SarvButton>
          </section>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionOne",
    "header",
    "pageOne",
    "imgPageOne",
    "sectionTwo",
    "sectionTwo3",
    "sectionThree",
    "dataFetcher",
    "projectCard",
    "sectionFour",
    "sarvButton",
    "footer"
  ],

  sectionOne: ["sectionOne", "header", "pageOne", "imgPageOne"],
  header: ["header"],
  pageOne: ["pageOne", "imgPageOne"],
  imgPageOne: ["imgPageOne"],
  sectionTwo: ["sectionTwo"],
  sectionTwo3: ["sectionTwo3"],
  sectionThree: ["sectionThree", "dataFetcher", "projectCard"],
  dataFetcher: ["dataFetcher", "projectCard"],
  projectCard: ["projectCard"],
  sectionFour: ["sectionFour", "sarvButton"],
  sarvButton: ["sarvButton"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomePage__ArgProps,
          internalVariantPropNames: PlasmicHomePage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePage";
  } else {
    func.displayName = `PlasmicHomePage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"aUZyoBv2znBVirsF7auAUJ"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "aUZyoBv2znBVirsF7auAUJ"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomePage = Object.assign(
  // Top-level PlasmicHomePage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    sectionOne: makeNodeComponent("sectionOne"),
    header: makeNodeComponent("header"),
    pageOne: makeNodeComponent("pageOne"),
    imgPageOne: makeNodeComponent("imgPageOne"),
    sectionTwo: makeNodeComponent("sectionTwo"),
    sectionTwo3: makeNodeComponent("sectionTwo3"),
    sectionThree: makeNodeComponent("sectionThree"),
    dataFetcher: makeNodeComponent("dataFetcher"),
    projectCard: makeNodeComponent("projectCard"),
    sectionFour: makeNodeComponent("sectionFour"),
    sarvButton: makeNodeComponent("sarvButton"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomePage
    internalVariantProps: PlasmicHomePage__VariantProps,
    internalArgProps: PlasmicHomePage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomePage;
/* prettier-ignore-end */
