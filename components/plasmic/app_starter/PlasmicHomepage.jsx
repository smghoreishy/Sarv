// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2iY41mfJXHdbZwwmQPPPJH
// Component: rCtbrvZ1Ie
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: W6YEI9_T3gd/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: 2iY41mfJXHdbZwwmQPPPJH/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: rCtbrvZ1Ie/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data[4].City;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );

  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "uhp97pecP4dck3qs8PojUi",
            opId: "fd63986b-a53b-4e76-b07e-1d59efa9223f",
            userArgs: {},
            cacheKey: "plasmic.$.oA13I0BIV.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          } else {
            throw e;
          }
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <ph.DataCtxReader>
              {$ctx => (
                <React.Fragment>
                  <section
                    data-plasmic-name={"section"}
                    data-plasmic-override={overrides.section}
                    className={classNames(projectcss.all, sty.section)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__u1CvI
                      )}
                    >
                      {
                        "\u0641\u0631\u0635\u062a \u0639\u0627\u0644\u06cc\n\u0628\u0631\u0627\u06cc \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0631 \u062d\u0648\u0632\u0647 \u0645\u0633\u06a9\u0646"
                      }
                    </h1>
                  </section>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__ukcLw
                    )}
                  >
                    {
                      "\u0622\u062e\u0631\u06cc\u0646 \u067e\u0631\u0648\u0698\u0647 \u0647\u0627\u06cc \u062f\u0631\u062d\u0627\u0644 \u0627\u062c\u0631\u0627"
                    }
                  </h1>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dTs7E)}
                  >
                    <CmsQueryRepeater
                      data-plasmic-name={"cmsDataFetcher"}
                      data-plasmic-override={overrides.cmsDataFetcher}
                      className={classNames(
                        "__wab_instance",
                        sty.cmsDataFetcher
                      )}
                      desc={false}
                      emptyMessage={null}
                      forceEmptyState={false}
                      forceLoadingState={false}
                      limit={0}
                      loadingMessage={null}
                      noAutoRepeat={false}
                      noLayout={false}
                      useDraft={false}
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ohVes
                            )}
                          >
                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__ytW0
                              )}
                              field={"images"}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__eFb55
                              )}
                            />

                            <CmsRowField
                              className={classNames(
                                "__wab_instance",
                                sty.cmsEntryField__gvJvq
                              )}
                              field={"area"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___4OtWy
                              )}
                            >
                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1__ztHjh
                                )}
                              >
                                {"\u062a\u0648\u0645\u0627\u0646"}
                              </h1>
                              <CmsRowField
                                className={classNames(
                                  "__wab_instance",
                                  sty.cmsEntryField___0PHM
                                )}
                                field={"minOrder"}
                              />

                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1__tHemn
                                )}
                              >
                                {
                                  "\u062d\u062f\u0627\u0642\u0644 \u0645\u0628\u0644\u063a \u0633\u0631\u0645\u0627\u06cc\u0647 \u06af\u0630\u0627\u0631\u06cc:"
                                }
                              </h1>
                            </div>
                          </div>
                        )}
                      </ph.DataCtxReader>
                    </CmsQueryRepeater>
                  </div>
                </React.Fragment>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "section", "cmsDataFetcher"],
  pageLayout: ["pageLayout", "section", "cmsDataFetcher"],
  section: ["section"],
  cmsDataFetcher: ["cmsDataFetcher"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"2iY41mfJXHdbZwwmQPPPJH"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "2iY41mfJXHdbZwwmQPPPJH"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc:
        "https://site-assets.plasmic.app/91371ba3f98c9842834db58ad9f6d303.jpg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
